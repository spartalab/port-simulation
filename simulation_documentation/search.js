window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "simulation_classes", "modulename": "simulation_classes", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "simulation_classes.channel", "modulename": "simulation_classes.channel", "kind": "module", "doc": "<p>This module defines the Channel and ChannelSection classes for simulating ship navigation through a channel.</p>\n"}, {"fullname": "simulation_classes.channel.ChannelSection", "modulename": "simulation_classes.channel", "qualname": "ChannelSection", "kind": "class", "doc": "<p>Class for each section of the channel<br />\nThis class manages the dimensions and capacities of a channel section, \nand provides methods to check if a ship can navigate through it based on its width, draft, and other restrictions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (Env):</strong>  The simulation environment.</li>\n<li><strong>id (int):</strong>  The identifier for the channel section.</li>\n<li><strong>length (float):</strong>  The length of the channel section.</li>\n<li><strong>width (float):</strong>  The width of the channel section.</li>\n<li><strong>draft (float):</strong>  The draft of the channel section.</li>\n<li><strong>speed (float):</strong>  The speed of the channel section.</li>\n<li><strong>simulation_time (int):</strong>  The total simulation time.</li>\n<li><strong>safeTwoway (bool):</strong>  Whether the section is safe for two-way traffic.</li>\n</ul>\n"}, {"fullname": "simulation_classes.channel.ChannelSection.can_accommodate_width", "modulename": "simulation_classes.channel", "qualname": "ChannelSection.can_accommodate_width", "kind": "function", "doc": "<p>Check if the channel section can accommodate the width of the ship at a given time step.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ship_info (dict):</strong>  Information about the ship, including its width and direction.</li>\n<li><strong>start_time (int):</strong>  The start time of the ship's passage through the section.</li>\n<li><strong>end_time (int):</strong>  The end time of the ship's passage through the section.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the section can accommodate the ship's width, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ship_info</span>, </span><span class=\"param\"><span class=\"n\">start_time</span>, </span><span class=\"param\"><span class=\"n\">end_time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.channel.ChannelSection.can_accommodate_draft", "modulename": "simulation_classes.channel", "qualname": "ChannelSection.can_accommodate_draft", "kind": "function", "doc": "<p>Check if the channel section can accommodate the draft of the ship at a given time step.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ship_info (dict):</strong>  Information about the ship, including its draft and direction.</li>\n<li><strong>start_time (int):</strong>  The start time of the ship's passage through the section.</li>\n<li><strong>end_time (int):</strong>  The end time of the ship's passage through the section.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the section can accommodate the ship's draft, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ship_info</span>, </span><span class=\"param\"><span class=\"n\">start_time</span>, </span><span class=\"param\"><span class=\"n\">end_time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.channel.ChannelSection.can_accomodate_gap_out", "modulename": "simulation_classes.channel", "qualname": "ChannelSection.can_accomodate_gap_out", "kind": "function", "doc": "<p>Check if the channel section can accommodate the minimum spacing for the ship at a given time step.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>start_time (int):</strong>  The start time of the ship's passage through the section.</li>\n<li><strong>ship_info (dict):</strong>  Information about the ship, including its direction.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the section can accommodate the minimum spacing, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">start_time</span>, </span><span class=\"param\"><span class=\"n\">ship_info</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.channel.ChannelSection.update_usage", "modulename": "simulation_classes.channel", "qualname": "ChannelSection.update_usage", "kind": "function", "doc": "<p>Update the usage of the channel section based on the ship's information.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (int):</strong>  The identifier for the current simulation run.</li>\n<li><strong>ship_info (dict):</strong>  Information about the ship, including its width, draft, and direction.</li>\n<li><strong>start_time (int):</strong>  The start time of the ship's passage through the section.</li>\n<li><strong>end_time (int):</strong>  The end time of the ship's passage through the section.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">ship_info</span>, </span><span class=\"param\"><span class=\"n\">start_time</span>, </span><span class=\"param\"><span class=\"n\">end_time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.channel.ChannelSection.space_out", "modulename": "simulation_classes.channel", "qualname": "ChannelSection.space_out", "kind": "function", "doc": "<p>Space out the channel section for the ship based on its direction and start time.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>start_time (int):</strong>  The start time of the ship's passage through the section.</li>\n<li><strong>ship_info (dict):</strong>  Information about the ship, including its direction.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">start_time</span>, </span><span class=\"param\"><span class=\"n\">ship_info</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.channel.Channel", "modulename": "simulation_classes.channel", "qualname": "Channel", "kind": "class", "doc": "<p>Class for the entire channel.</p>\n\n<p>This class manages the sections of the channel and handles ship navigation through it. It implements the necessary methods to check for restrictions, schedule ships, and log their movements.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ship_logs (list):</strong>  List to log ship information.</li>\n<li><strong>env (Env):</strong>  The simulation environment.</li>\n<li><strong>numSections (int):</strong>  Number of sections in the channel.</li>\n<li><strong>simulation_time (int):</strong>  Total simulation time for the channel.</li>\n<li><strong>safeTwoway (bool):</strong>  Whether the channel is safe for two-way traffic.</li>\n<li><strong>channel_events (list):</strong>  List to log channel events.</li>\n<li><strong>channel_logs (list):</strong>  List to log channel information.</li>\n<li><strong>day_pilots (simpy.Container):</strong>  Simpy container for day pilots.</li>\n<li><strong>night_pilots (simpy.Container):</strong>  Simpy container for night pilots.</li>\n<li><strong>tugboats (simpy.Container):</strong>  Simpy container for tugboats.</li>\n<li><strong>turnoffTime (dict):</strong>  Dictionary with turnoff times and conditions.</li>\n<li><strong>channel_scheduer (Resource):</strong>  Resource for scheduling channel usage.</li>\n<li><strong>seed (int):</strong>  Random seed for reproducibility.</li>\n</ul>\n"}, {"fullname": "simulation_classes.channel.Channel.channel_closed", "modulename": "simulation_classes.channel", "qualname": "Channel.channel_closed", "kind": "function", "doc": "<p>Check if the channel is closed at a given time step.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time (int):</strong>  The time step to check for channel closure.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.channel.Channel.channel_closed_restriction", "modulename": "simulation_classes.channel", "qualname": "Channel.channel_closed_restriction", "kind": "function", "doc": "<p>Check if the ship has beam restriction in the channel in any section at a given time step.\nLogic: </p>\n\n<ul>\n<li>If the ship is entering the channel, check each section from the start to the last section.</li>\n<li>If the ship is leaving the channel, check each section from the last section to the start.</li>\n<li>For each section, calculate the end time based on the ship's speed and length of the section.</li>\n<li>For each section, check if the channel is closed at the end time.</li>\n<li>If the channel is closed at the end time, return True (indicating the channel is closed for the ship).</li>\n<li>If no section is closed, return False (indicating the channel is open for the ship).</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ship_info (dict):</strong>  Information about the ship, including its direction.</li>\n<li><strong>lastSection (int):</strong>  The last section of the channel to check.</li>\n<li><strong>enter_time (int):</strong>  The time step when the ship enters the channel.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the channel is closed for the ship, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ship_info</span>, </span><span class=\"param\"><span class=\"n\">lastSection</span>, </span><span class=\"param\"><span class=\"n\">enter_time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.channel.Channel.beam_restriction", "modulename": "simulation_classes.channel", "qualname": "Channel.beam_restriction", "kind": "function", "doc": "<p>Check if the ship has beam restriction in the channel in any section at a given time step.\nLogic: </p>\n\n<ul>\n<li>If the ship is entering the channel, check each section from the start to the last section.</li>\n<li>If the ship is leaving the channel, check each section from the last section to the start.</li>\n<li>For each section, calculate the end time based on the ship's speed and length of the section.</li>\n<li>For each section, check if the width of the ship exceeds the available width in the section.</li>\n<li>If the width of the ship exceeds the available width in any section, return True (indicating beam restriction).</li>\n<li>If no section has beam restriction, return False (indicating no beam restriction).</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ship_info (dict):</strong>  Information about the ship, including its width and direction.</li>\n<li><strong>lastSection (int):</strong>  The last section of the channel to check.</li>\n<li><strong>enter_time (int):</strong>  The time step when the ship enters the channel.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the ship has beam restriction, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ship_info</span>, </span><span class=\"param\"><span class=\"n\">lastSection</span>, </span><span class=\"param\"><span class=\"n\">enter_time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.channel.Channel.draft_restriction", "modulename": "simulation_classes.channel", "qualname": "Channel.draft_restriction", "kind": "function", "doc": "<p>Check if the ship has draft restriction in the channel in any section at a given time step.\nLogic is similar to beam_restriction, but checks for draft instead of width.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ship_info (dict):</strong>  Information about the ship, including its draft and direction.</li>\n<li><strong>lastSection (int):</strong>  The last section of the channel to check.</li>\n<li><strong>enter_time (int):</strong>  The time step when the ship enters the channel.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the ship has draft restriction, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ship_info</span>, </span><span class=\"param\"><span class=\"n\">lastSection</span>, </span><span class=\"param\"><span class=\"n\">enter_time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.channel.Channel.minimal_spacing_not_avlbl", "modulename": "simulation_classes.channel", "qualname": "Channel.minimal_spacing_not_avlbl", "kind": "function", "doc": "<p>Check if the minimal spacing for the ship is not available in the channel in any section at a given time step.\nLogic is similar to beam_restriction, but checks for minimal spacing instead of width.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ship_info (dict):</strong>  Information about the ship, including its direction.</li>\n<li><strong>lastSection (int):</strong>  The last section of the channel to check.</li>\n<li><strong>enter_time (int):</strong>  The time step when the ship enters the channel.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the minimal spacing is not available, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ship_info</span>, </span><span class=\"param\"><span class=\"n\">lastSection</span>, </span><span class=\"param\"><span class=\"n\">enter_time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.channel.Channel.daylight_restriction", "modulename": "simulation_classes.channel", "qualname": "Channel.daylight_restriction", "kind": "function", "doc": "<p>Check if the ship has daylight restriction in the channel at a given time step.\nLogic:</p>\n\n<ul>\n<li>Check the ship's type and dimensions (width and length).</li>\n<li>If the ship is a Container, Liquid, or DryBulk type, check if its width or length exceeds the specified limits.</li>\n<li>If the ship exceeds the limits, check if it is daytime at the time of entry.</li>\n<li>If it is not daytime, return True (indicating daylight restriction).</li>\n<li>If the ship does not exceed the limits or it is daytime, return False (indicating no daylight restriction).</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ship_info (dict):</strong>  Information about the ship, including its type, width, and length.</li>\n<li><strong>lastSection (int):</strong>  The last section of the channel to check.</li>\n<li><strong>enter_time (int):</strong>  The time step when the ship enters the channel.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the ship has daylight restriction, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ship_info</span>, </span><span class=\"param\"><span class=\"n\">lastSection</span>, </span><span class=\"param\"><span class=\"n\">enter_time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.channel.Channel.scheduler", "modulename": "simulation_classes.channel", "qualname": "Channel.scheduler", "kind": "function", "doc": "<p>Schedule the ship to navigate through the channel. This happens before the ship actually moves through the channel.\nLogic:</p>\n\n<ul>\n<li>Check if the ship has any restrictions in the channel (beam, draft, daylight, minimal spacing).</li>\n<li>If there are any restrictions, log the ship's information and return.</li>\n<li>If there are no restrictions, update the ship's logs and schedule the ship to move through the channel.</li>\n<li>If the ship is entering the channel, update the usage of each section in the channel.</li>\n<li>If the ship is leaving the channel, update the usage of each section in reverse order.</li>\n<li>Log the ship's movement through the channel.</li>\n<li>Finally, yield the ship's movement through the channel.\nNote this is different from the move_through_channel method, which is called when the ship actually moves through the channel.\nThe scheduler method is called as soon as the ship requests to enter the channel.\nIf the ship has any restrictions, it will not be scheduled to move through the channel.</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ship_info (dict):</strong>  Information about the ship, including its direction, width, draft, and speed.</li>\n<li><strong>lastSection (int):</strong>  The last section of the channel to check.</li>\n<li><strong>run_id (int):</strong>  The identifier for the current simulation run.</li>\n<li><strong>enter_time (int):</strong>  The time step when the ship enters the channel.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ship_info</span>, </span><span class=\"param\"><span class=\"n\">lastSection</span>, </span><span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">enter_time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.channel.Channel.move_through_channel", "modulename": "simulation_classes.channel", "qualname": "Channel.move_through_channel", "kind": "function", "doc": "<p>Simulate the movement of the ship through the channel.\nLogic:</p>\n\n<ul>\n<li>If the ship is entering the channel, iterate through each section from the start to the last section.</li>\n<li>If the ship is leaving the channel, iterate through each section from the last section to the start.</li>\n<li>For each section, calculate the speed and end time based on the ship's speed and length of the section.</li>\n<li>Log the ship's movement through the section, including its ship_id, ship_type, width, draft, and direction.</li>\n<li>Yield the ship's movement through the section.</li>\n<li>Log the time spent in each section.</li>\n<li>Finally, update the ship's logs with the time spent in the channel.</li>\n<li>If the ship is entering the channel, log the time spent in each section going in.</li>\n<li>If the ship is leaving the channel, log the time spent in each section going out.\nNote this is different from the scheduler method,which schedules before the ship actually moves through the channel.\nThe sheduler happens as soon as the ship requests to enter the channel.\nThe move_through_channel method is called when the ship actually moves through the channel (when there are no restrictions).</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ship_info (dict):</strong>  Information about the ship, including its ship_id, ship_type, width, draft, and direction.</li>\n<li><strong>lastSection (int):</strong>  The last section of the channel to check.</li>\n<li><strong>run_id (int):</strong>  The identifier for the current simulation run.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ship_info</span>, </span><span class=\"param\"><span class=\"n\">lastSection</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.channel.Channel.check_restrictions", "modulename": "simulation_classes.channel", "qualname": "Channel.check_restrictions", "kind": "function", "doc": "<p>Check if the ship has any restrictions in the channel at a given time step.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ship_info (dict):</strong>  Information about the ship, including its direction, width, draft, and ship type.</li>\n<li><strong>lastSection (int):</strong>  The last section of the channel to check.</li>\n<li><strong>request_time (int):</strong>  The time step when the ship requests to enter the channel.</li>\n<li><strong>wait_beam (int):</strong>  The number of time steps the ship has waited for beam restrictions.</li>\n<li><strong>wait_draft (int):</strong>  The number of time steps the ship has waited for draft restrictions.</li>\n<li><strong>wait_daylight (int):</strong>  The number of time steps the ship has waited for daylight restrictions.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: A tuple containing:\n      - restrictions (bool): True if there are any restrictions, False otherwise.\n      - wait_beam (int): The updated number of time steps the ship has waited for beam restrictions.\n      - wait_draft (int): The updated number of time steps the ship has waited for draft restrictions.\n      - wait_daylight (int): The updated number of time steps the ship has waited for daylight restrictions.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ship_info</span>,</span><span class=\"param\">\t<span class=\"n\">lastSection</span>,</span><span class=\"param\">\t<span class=\"n\">request_time</span>,</span><span class=\"param\">\t<span class=\"n\">wait_beam</span>,</span><span class=\"param\">\t<span class=\"n\">wait_draft</span>,</span><span class=\"param\">\t<span class=\"n\">wait_daylight</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.channel.Channel.channel_process", "modulename": "simulation_classes.channel", "qualname": "Channel.channel_process", "kind": "function", "doc": "<p>Process for handling the ship's entry into the channel.\nIt handles the scheduling and movement of the ship through the channel, including checking for restrictions and logging the ship's information.\nThe process has the following steps:</p>\n\n<ol>\n<li>Check if the ship is entering or leaving the channel based on its direction.</li>\n<li>If the ship is entering the channel, then:\n2.1. Get the pilots based on the time of day (day or night).\n2.2. Check when the ship is allowed to enter being free of restrictions.\n2.3 Schedule the ship to move through the channel.\n2.4 Wait till the ship can move through the channel.\n2.5 Move the ship through the channel.\n2.6 Get the tugboats and steer the ship.</li>\n<li>If the ship is leaving the channel, then:\n3.1. Get the pilots based on the time of day (day or night).\n3.2 Get the tugboats and steer the ship.\n3.3.Check when the ship is allowed to leave being free of restrictions.\n3.4 Schedule the ship to move through the channel.\n3.5 Wait till the ship can move through the channel.\n3.6 Move the ship through the channel.</li>\n</ol>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ship_info (dict):</strong>  Information about the ship, including its direction, pilots, tugboats, and other attributes.</li>\n<li><strong>day (bool):</strong>  Whether it is daytime or nighttime.</li>\n<li><strong>lastSection (int):</strong>  The last section of the channel to check.</li>\n<li><strong>ship_id (int):</strong>  The identifier for the ship.</li>\n<li><strong>ship_terminal (str):</strong>  The terminal where the ship is headed.</li>\n<li><strong>ship_type (str):</strong>  The type of the ship (e.g., Container, Liquid, DryBulk).</li>\n<li><strong>run_id (int):</strong>  The identifier for the current simulation run.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ship_info</span>,</span><span class=\"param\">\t<span class=\"n\">day</span>,</span><span class=\"param\">\t<span class=\"n\">lastSection</span>,</span><span class=\"param\">\t<span class=\"n\">ship_id</span>,</span><span class=\"param\">\t<span class=\"n\">ship_terminal</span>,</span><span class=\"param\">\t<span class=\"n\">ship_type</span>,</span><span class=\"param\">\t<span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.pipeline", "modulename": "simulation_classes.pipeline", "kind": "module", "doc": "<p>This module defines the Pipeline class, which simulates the flow of liquid in a pipeline system.\nThese pipelines can operate in two modes: 'sink' for draining liquid from a storage tank and 'source' for filling it.\nThis pipelines only connect storage tanks and not tanker vessels.</p>\n"}, {"fullname": "simulation_classes.pipeline.Pipeline", "modulename": "simulation_classes.pipeline", "qualname": "Pipeline", "kind": "class", "doc": "<p>Pipeline class to simulate the flow of liquid in a pipeline system.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (int):</strong>  Unique identifier for the simulation run.</li>\n<li><strong>env (simpy.Environment):</strong>  Simulation environment.</li>\n<li><strong>tank (simpy.Container):</strong>  Container representing the storage tank.    </li>\n<li><strong>mode (str):</strong>  Mode of operation, either 'sink' or 'source'.</li>\n<li><strong>rate (float):</strong>  Rate at which the pipeline operates, in units per time step.</li>\n</ul>\n"}, {"fullname": "simulation_classes.pipeline.Pipeline.run", "modulename": "simulation_classes.pipeline", "qualname": "Pipeline.run", "kind": "function", "doc": "<p>Simulate pipeline operation.\nLogic is as follows --\nIf mode is 'sink', empty the storage at the rate of 'rate' units per time step unless the storage is empty.\nIf mode is 'source', fill the storage at the rate of 'rate' units per time step unless the storage is full.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"yields\">Yields:</h6>\n\n<blockquote>\n  <p>simpy.Timeout: Waits for 1 time unit before the next operation.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If the rate exceeds the storage level or capacity limits.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.port", "modulename": "simulation_classes.port", "kind": "module", "doc": "<p>This module defines the port resources and their initialization for a port simulation.\nIt includes classes for containers, cranes, berths, pipelines, conveyors, and their respective initialization methods.\nThis module is part of a larger port simulation system that models the operations of a port, including handling of containers, liquid bulk, and dry bulk cargo.</p>\n"}, {"fullname": "simulation_classes.port.Container", "modulename": "simulation_classes.port", "qualname": "Container", "kind": "class", "doc": "<p>Class representing a container in the port yard.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>id (str):</strong>  Unique identifier for the container.</li>\n<li><strong>width (int):</strong>  Width of the container.</li>\n</ul>\n"}, {"fullname": "simulation_classes.port.Crane", "modulename": "simulation_classes.port", "qualname": "Crane", "kind": "class", "doc": "<p>Class representing a crane in a container berth.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>id (str):</strong>  Unique identifier for the crane.</li>\n<li><strong>width (int):</strong>  Width of the crane.</li>\n<li><strong>crane_transfer_rate (float):</strong>  Rate at which the crane can transfer containers.</li>\n</ul>\n"}, {"fullname": "simulation_classes.port.Berth_Ctr", "modulename": "simulation_classes.port", "qualname": "Berth_Ctr", "kind": "class", "doc": "<p>Class representing a container berth with multiple cranes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment.</li>\n<li><strong>id (str):</strong>  Unique identifier for the berth.</li>\n<li><strong>cranes_per_berth (int):</strong>  Number of cranes in the berth.</li>\n<li><strong>crane_transfer_rate (float):</strong>  Rate at which each crane can transfer containers.</li>\n</ul>\n"}, {"fullname": "simulation_classes.port.Pipeline", "modulename": "simulation_classes.port", "qualname": "Pipeline", "kind": "class", "doc": "<p>Class representing a pipeline in a liquid berth.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment.</li>\n<li><strong>id (str):</strong>  Unique identifier for the pipeline.</li>\n<li><strong>pump_rate_per_pipeline (float):</strong>  Rate at which the pipeline can pump liquid.</li>\n</ul>\n"}, {"fullname": "simulation_classes.port.Berth_Liq", "modulename": "simulation_classes.port", "qualname": "Berth_Liq", "kind": "class", "doc": "<p>Class representing a liquid berth with multiple pipelines.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment.</li>\n<li><strong>id (str):</strong>  Unique identifier for the berth.</li>\n<li><strong>piplines_per_berth (int):</strong>  Number of pipelines in the berth.</li>\n<li><strong>pump_rate_per_pipeline (float):</strong>  Rate at which each pipeline can pump liquid.</li>\n</ul>\n"}, {"fullname": "simulation_classes.port.Conveyor", "modulename": "simulation_classes.port", "qualname": "Conveyor", "kind": "class", "doc": "<p>Class representing a conveyor in a dry bulk berth.\n Args:\n    env (simpy.Environment): The simulation environment.\n    id (str): Unique identifier for the conveyor.\n    conveyor_rate_per_conveyor (float): Rate at which the conveyor can transfer dry bulk.</p>\n"}, {"fullname": "simulation_classes.port.Berth_DryBulk", "modulename": "simulation_classes.port", "qualname": "Berth_DryBulk", "kind": "class", "doc": "<p>Class representing a dry bulk berth with multiple conveyors.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment.</li>\n<li><strong>id (str):</strong>  Unique identifier for the berth.</li>\n<li><strong>conveyors_per_berth (int):</strong>  Number of conveyors in the berth.</li>\n<li><strong>conveyor_rate_per_conveyor (float):</strong>  Rate at which each conveyor can transfer dry bulk.</li>\n</ul>\n"}, {"fullname": "simulation_classes.port.create_resources", "modulename": "simulation_classes.port", "qualname": "create_resources", "kind": "function", "doc": "<p>Create and initialize resources for the port simulation based on terminal data.\nThis function sets up yards, berths, tanks, silos, loading bays, truck gates, train loading racks,\nand pilot/tugboat resources for each terminal type (Container, Liquid, DryBulk).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>terminal_data (dict):</strong>  Dictionary containing terminal data.</li>\n<li><strong>run_id (str):</strong>  Unique identifier for the simulation run.</li>\n<li><strong>terminal_data_df (pd.DataFrame):</strong>  DataFrame containing terminal data.</li>\n<li><strong>num_terminals (tuple):</strong>  Tuple containing the number of terminals for each cargo type (Container, Liquid, DryBulk).</li>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment.</li>\n<li><strong>seed (int):</strong>  Random seed for reproducibility.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>terminal_resouces (list): List of resources created for each terminal type. This includes yards, berths, tanks, silos, loading bays, truck gates, train loading racks, pilots, tugboats, and channel scheduler.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">terminal_data</span>, </span><span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">terminal_data_df</span>, </span><span class=\"param\"><span class=\"n\">num_terminals</span>, </span><span class=\"param\"><span class=\"n\">env</span>, </span><span class=\"param\"><span class=\"n\">seed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.terminal_container", "modulename": "simulation_classes.terminal_container", "kind": "module", "doc": "<p>Uses container terminal class objects to create container terminal processes.\nVessel arrivals, berth and crane allocation, container unloading, container loading, vessel waiting, and vessel departure are simulated.</p>\n"}, {"fullname": "simulation_classes.terminal_container.ContainerTerminal", "modulename": "simulation_classes.terminal_container", "qualname": "ContainerTerminal", "kind": "class", "doc": "<p>Class to simulate the container terminal and the processes of arriving ships.\nThis class handles the docking, unloading, loading, waiting, and departure of container ships.\nIt also manages the allocation of berths and cranes, and the interaction with the channel for ship movements.<br />\nThe processes include the following steps:</p>\n\n<ol>\n<li>Ship arrival at the port.</li>\n<li>Anchorage waiting.</li>\n<li>Berth allocation.</li>\n<li>Channel process (inbound).</li>\n<li>Docking the ship to a berth.</li>\n<li>Unloading containers from the ship.</li>\n<li>Loading containers onto the ship.</li>\n<li>Waiting at the port after unloading and loading operations.</li>\n<li>Detaching from the berth and departing from the port.</li>\n<li>Channel process (outbound).</li>\n<li>Ship departure from the port.\nThe class also logs events and ship activities throughout the process.</li>\n</ol>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment</li>\n<li><strong>chassis_bays_utilization (float):</strong>  Utilization of chassis bays</li>\n<li><strong>run_id (int):</strong>  Unique identifier for the simulation run</li>\n<li><strong>channel (Channel):</strong>  The channel object for managing ship movements</li>\n<li><strong>day_pilots (simpy.Container):</strong>  Simpy container for day pilots available</li>\n<li><strong>night_pilots (simpy.Container) :</strong>  Simpy container for night pilots available</li>\n<li><strong>tugboats (simpy.Container):</strong>  Simpy container for tugboats available</li>\n<li><strong>ship_info (dict):</strong>  Information about the ships</li>\n<li><strong>last_section (str):</strong>  The last section of the channel</li>\n<li><strong>selected_terminal (str):</strong>  The terminal selected for the ship</li>\n<li><strong>id (int):</strong>  Unique identifier for the ship</li>\n<li><strong>ship_type (str):</strong>  Type of the ship (e.g., Container, Liquid, DryBulk)</li>\n<li><strong>draft (float):</strong>  Draft of the ship</li>\n<li><strong>width (float):</strong>  Width of the ship</li>\n<li><strong>unload_time_per_container (float):</strong>  Time taken to unload a container</li>\n<li><strong>load_time_per_container (float):</strong>  Time taken to load a container</li>\n<li><strong>containers_to_unload (list):</strong>  List of containers to be unloaded</li>\n<li><strong>containers_to_load (list):</strong>  List of containers to be loaded</li>\n<li><strong>events (list):</strong>  List to store events during the simulation</li>\n<li><strong>ship_logs (list):</strong>  List to store logs of the ship's activities</li>\n<li><strong>port_berths (simpy.Resource):</strong>  Resource representing the berths at the port</li>\n<li><strong>port_yard (simpy.Store):</strong>  Store representing the port's yard for containers</li>\n<li><strong>SHIPS_IN_CHANNEL (int):</strong>  Number of ships allowed in the channel</li>\n<li><strong>SHIPS_IN_ANCHORAGE (int):</strong>  Number of ships allowed in the anchorage</li>\n<li><strong>terminal_data (dict):</strong>  Data about the terminals, including transfer units per berth and import/export capabilities</li>\n</ul>\n"}, {"fullname": "simulation_classes.terminal_container.ContainerTerminal.process", "modulename": "simulation_classes.terminal_container", "qualname": "ContainerTerminal.process", "kind": "function", "doc": "<p>Process for the container terminal, simulating the arrival, unloading, loading, waiting, and departure of ships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.terminal_container.ContainerTerminal.dock", "modulename": "simulation_classes.terminal_container", "qualname": "ContainerTerminal.dock", "kind": "function", "doc": "<p>Represents the process of docking the ship to a berth and allocating cranes.\nThis includes waiting for a berth to become available and then getting the cranes allocated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.terminal_container.ContainerTerminal.unload", "modulename": "simulation_classes.terminal_container", "qualname": "ContainerTerminal.unload", "kind": "function", "doc": "<p>Represents the unloading of containers from the vessel at the input crane movement rate.\nThis includes requesting cranes, unloading containers, and storing them in the port yard.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.terminal_container.ContainerTerminal.load", "modulename": "simulation_classes.terminal_container", "qualname": "ContainerTerminal.load", "kind": "function", "doc": "<p>Represents the loading of containers onto the vessel at the input crane movement rate.\nThis includes checking if the terminal can export containers, loading them onto the vessel, and removing them from the yard.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.terminal_container.ContainerTerminal.wait", "modulename": "simulation_classes.terminal_container", "qualname": "ContainerTerminal.wait", "kind": "function", "doc": "<p>Represents the waiting time at the port after unloading and loading operations.\nThis includes calculating the waiting time based on the terminal efficiency and cargo wait time.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.terminal_container.ContainerTerminal.detach_and_depart", "modulename": "simulation_classes.terminal_container", "qualname": "ContainerTerminal.detach_and_depart", "kind": "function", "doc": "<p>Represents the process of detaching from the berth and departing from the port.\nThis includes returning the cranes to the berth and releasing the berth for other ships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.terminal_drybulk", "modulename": "simulation_classes.terminal_drybulk", "kind": "module", "doc": "<p>Uses dry bulk terminal class objects to create dry bulk terminal processes.\nVessel arrivals, berth and conveyor allocation, cargo unloading, cargo loading, vessel waiting, and vessel departure are simulated.</p>\n"}, {"fullname": "simulation_classes.terminal_drybulk.DryBulkTerminal", "modulename": "simulation_classes.terminal_drybulk", "qualname": "DryBulkTerminal", "kind": "class", "doc": "<p>Represents a dry bulk terminal and the process of handling arriving ships.\nThis class simulates the arrival, berthing, unloading, loading, waiting, and departure of dry bulk ships at the terminal.\nIt manages the allocation of berths and conveyors, handles cargo operations, and logs events during the simulation.\nThe process includes the following steps:</p>\n\n<ol>\n<li>Ship arrival at the terminal.</li>\n<li>Anchorage waiting period.</li>\n<li>Berth allocation for the ship.</li>\n<li>Channel process for entering the terminal.</li>\n<li>Docking the ship to the berth.</li>\n<li>Unloading dry bulk cargo from the ship.</li>\n<li>Loading dry bulk cargo onto the ship.</li>\n<li>Waiting at the terminal until the ship is ready to depart.</li>\n<li>Detaching the ship from the berth and departing from the terminal.</li>\n<li>Channel process for leaving the terminal.\nThe class also logs events and maintains ship logs throughout the process.</li>\n</ol>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (SimPy.Environment):</strong>  The simulation environment.</li>\n<li><strong>chassis_bays_utilization (float):</strong>  Utilization of chassis bays.</li>\n<li><strong>run_id (int):</strong>  Unique identifier for the simulation run.</li>\n<li><strong>channel (Channel):</strong>  The channel object for managing ship movements.  </li>\n<li><strong>day_pilots (simpy.Container):</strong>  Simpy container of available day pilots.</li>\n<li><strong>night_pilots (simpy.Container) :</strong>  Simpy container of available night pilots.</li>\n<li><strong>tugboats (simpy.Container):</strong>  Simpy container of available tugboats.</li>\n<li><strong>ship_info (dict):</strong>  Information about the ships.</li>\n<li><strong>last_section (str):</strong>  The last section of the channel.</li>\n<li><strong>selected_terminal (str):</strong>  The terminal selected for the ship.</li>\n<li><strong>id (int):</strong>  Unique identifier for the ship.</li>\n<li><strong>ship_type (str):</strong>  Type of the ship (e.g., \"DryBulk\").</li>\n<li><strong>draft (float):</strong>  Draft of the ship.</li>\n<li><strong>width (float):</strong>  Width of the ship.</li>\n<li><strong>unload_time (float):</strong>  Time taken to unload cargo (in hours).</li>\n<li><strong>load_time (float):</strong>  Time taken to load cargo (in hours).</li>\n<li><strong>unload_tons (float):</strong>  Amount of cargo to unload (in tons).</li>\n<li><strong>load_tons (float):</strong>  Amount of cargo to load (in tons).</li>\n<li><strong>events (list):</strong>  List to store events during the simulation.</li>\n<li><strong>ship_logs (list):</strong>  List to store logs of the ship's activities.</li>\n<li><strong>port_berths (simpy.Resource):</strong>  Resource for managing port berths.</li>\n<li><strong>port_silos (simpy.Resource):</strong>  Resource for managing port silos.</li>\n<li><strong>SHIPS_IN_CHANNEL (int):</strong>  Number of ships allowed in the channel.</li>\n<li><strong>SHIPS_IN_ANCHORAGE (int):</strong>  Number of ships allowed in the anchorage.</li>\n<li><strong>terminal_data (dict):</strong>  Data related to the terminal.</li>\n</ul>\n"}, {"fullname": "simulation_classes.terminal_drybulk.DryBulkTerminal.process", "modulename": "simulation_classes.terminal_drybulk", "qualname": "DryBulkTerminal.process", "kind": "function", "doc": "<p>The main process for the dry bulk terminal, simulating the arrival, berthing, unloading, loading, waiting, and departure of ships.\nThis method handles the entire lifecycle of a dry bulk ship at the terminal.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.terminal_drybulk.DryBulkTerminal.arrive_and_berth", "modulename": "simulation_classes.terminal_drybulk", "qualname": "DryBulkTerminal.arrive_and_berth", "kind": "function", "doc": "<p>Represents the process of a vessel arriving at the terminal and seizing a berth.\nThis method handles the allocation of a berth for the vessel and prepares it for unloading and loading operations.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.terminal_drybulk.DryBulkTerminal.unload", "modulename": "simulation_classes.terminal_drybulk", "qualname": "DryBulkTerminal.unload", "kind": "function", "doc": "<p>Represents the unloading of dry bulk cargo from the vessel at the terminal.\nThis method allocates the required number of conveyors, unloads the cargo, and stores it in the port silos.\nIt also handles the waiting time until the unloading is completed, ensuring that it only proceeds during daytime hours.\nThe unloading process is divided into several steps:</p>\n\n<ol>\n<li>Check if the terminal has the required import conveyors.</li>\n<li>Allocate the conveyors for unloading.</li>\n<li>Unload the dry bulk cargo from the vessel.   </li>\n<li>Wait until the unloading is completed, ensuring it only occurs during daytime hours.</li>\n<li>Store the unloaded dry bulk cargo in the port silos.</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.terminal_drybulk.DryBulkTerminal.load", "modulename": "simulation_classes.terminal_drybulk", "qualname": "DryBulkTerminal.load", "kind": "function", "doc": "<p>Represents the loading of dry bulk cargo onto the vessel at the terminal.\nThis method allocates the required number of conveyors, loads the cargo onto the vessel, and updates the port silos.\nIt also handles the waiting time until the loading is completed, ensuring that it only proceeds during daytime hours.\nThe loading process is divided into several steps:</p>\n\n<ol>\n<li>Check if the terminal has the required export conveyors.</li>\n<li>Allocate the conveyors for loading.</li>\n<li>Load the dry bulk cargo onto the vessel.</li>\n<li>Wait until the loading is completed, ensuring it only occurs during daytime hours.</li>\n<li>Update the port silos to reflect the loaded cargo.</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.terminal_drybulk.DryBulkTerminal.wait", "modulename": "simulation_classes.terminal_drybulk", "qualname": "DryBulkTerminal.wait", "kind": "function", "doc": "<p>Represents the waiting time for the vessel at the port after unloading and loading operations.\nThis method calculates the waiting time based on the dry bulk efficiency and the cargo wait time.\nIt ensures that the vessel waits at the port until it is ready to depart.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.terminal_drybulk.DryBulkTerminal.detach_and_depart", "modulename": "simulation_classes.terminal_drybulk", "qualname": "DryBulkTerminal.detach_and_depart", "kind": "function", "doc": "<p>Represents the process of detaching the vessel from the berth and departing from the port.\nThis method handles the release of the allocated conveyors, updates the ship logs, and releases the berth.\nIt also logs the events related to the vessel's departure.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.terminal_liquid", "modulename": "simulation_classes.terminal_liquid", "kind": "module", "doc": "<p>Uses liquid bulk terminal class objects to create liquid terminal processes.\nVessel arrivals, berth and pipeline allocation, cargo unloading, cargo loading, vessel waiting, and vessel departure are simulated.</p>\n"}, {"fullname": "simulation_classes.terminal_liquid.LiquidTerminal", "modulename": "simulation_classes.terminal_liquid", "qualname": "LiquidTerminal", "kind": "class", "doc": "<p>LiquidTerminal class simulates the liquid bulk terminal operations, including ship arrivals, berthing, unloading, loading, waiting, and departure.\nIt manages the allocation of berths and pipelines, handles cargo operations, and logs events related to the terminal operations.\nThis class is initialized with various parameters such as the simulation environment, channel, pilots, tugboats, ship information, terminal data, and more.\nThe processes include the following steps:</p>\n\n<ol>\n<li>Ship arrival and anchorage waiting.</li>\n<li>Berth allocation.</li>\n<li>Channel process for entering the terminal.</li>\n<li>Unloading of liquid bulk cargo.</li>\n<li>Loading of liquid bulk cargo.</li>\n<li>Waiting time at the terminal.</li>\n<li>Detachment from the berth and departure from the terminal.</li>\n<li>Channel process for exiting the terminal.\nThe class also handles the allocation of pipelines based on the terminal type (import/export) and manages the storage of cargo in port tanks.\nIt logs all events and updates ship logs throughout the process.</li>\n</ol>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment.</li>\n<li><strong>chassis_bays_utilization (float):</strong>  Utilization of chassis bays.</li>\n<li><strong>run_id (str):</strong>  Unique identifier for the simulation run.</li>\n<li><strong>channel (Channel):</strong>  The channel object for managing ship movements.</li>\n<li><strong>day_pilots (simpy.Container):</strong>  Simpy container for day pilots available.</li>\n<li><strong>night_pilots (simpy.Container) :</strong>  Simpy container for night pilots available.    </li>\n<li><strong>tugboats (simpy.Container):</strong>  Simpy container for tugboats available.</li>\n<li><strong>ship_info (dict):</strong>  Information about the ships.</li>\n<li><strong>last_section (str):</strong>  The last section of the channel.</li>\n<li><strong>selected_terminal (str):</strong>  The terminal selected for the ship.</li>\n<li><strong>id (int):</strong>  Unique identifier for the ship.</li>\n<li><strong>ship_type (str):</strong>  Type of the ship (e.g., \"Liquid\").</li>\n<li><strong>draft (float):</strong>  Draft of the ship.</li>\n<li><strong>width (float):</strong>  Width of the ship.</li>\n<li><strong>unload_time (float):</strong>  Time taken to unload the ship.</li>\n<li><strong>load_time (float):</strong>  Time taken to load the ship.</li>\n<li><strong>unload_tons (float):</strong>  Amount of cargo to unload from the ship.</li>\n<li><strong>load_tons (float):</strong>  Amount of cargo to load onto the ship.</li>\n<li><strong>events (list):</strong>  List to store events related to the ship.</li>\n<li><strong>ship_logs (dict):</strong>  Dictionary to store logs for the ship.</li>\n<li><strong>port_berths (simpy.Resource):</strong>  Resource for managing port berths.</li>\n<li><strong>port_tanks (simpy.Container):</strong>  Container for managing port tanks.</li>\n<li><strong>SHIPS_IN_CHANNEL (int):</strong>  Number of ships currently in the channel.</li>\n<li><strong>SHIPS_IN_ANCHORAGE (int):</strong>  Number of ships currently in the anchorage.</li>\n<li><strong>terminal_data (dict):</strong>  Data related to the terminal.</li>\n<li><strong>liq_terminals_with_pipeline_source (list):</strong>  List of liquid terminals with pipeline source.</li>\n<li><strong>liq_terminals_with_pipeline_sink (list):</strong>  List of liquid terminals with pipeline sink.</li>\n</ul>\n"}, {"fullname": "simulation_classes.terminal_liquid.LiquidTerminal.process", "modulename": "simulation_classes.terminal_liquid", "qualname": "LiquidTerminal.process", "kind": "function", "doc": "<p>Process for the liquid bulk terminal, simulating the arrival, berthing, unloading, loading, waiting, and departure of ships.\nThis method handles the entire lifecycle of a ship at the terminal, including logging events and updating ship logs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.terminal_liquid.LiquidTerminal.arrive_and_berth", "modulename": "simulation_classes.terminal_liquid", "qualname": "LiquidTerminal.arrive_and_berth", "kind": "function", "doc": "<p>Represents the arrival of the ship at the terminal and allocation of a berth.\nThis method waits for a berth to become available and allocates it to the ship.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.terminal_liquid.LiquidTerminal.unload", "modulename": "simulation_classes.terminal_liquid", "qualname": "LiquidTerminal.unload", "kind": "function", "doc": "<p>Represents the unloading of liquid bulk cargo from the ship at the terminal.\nThis method checks if the terminal is exporting or importing, allocates pipelines, and unloads the cargo.\nIt also handles the storage of the unloaded cargo in the port tanks and ensures that the tanks have enough capacity.\nIf the port tanks are full, it activates a pipeline sink to empty the tanks.\nIf the port tanks are empty, it activates a pipeline source to fill the tanks.\nIt also ensures that the unloading process does not exceed the tank capacity.\nThe method logs events related to the unloading process.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.terminal_liquid.LiquidTerminal.load", "modulename": "simulation_classes.terminal_liquid", "qualname": "LiquidTerminal.load", "kind": "function", "doc": "<p>Represents the loading of liquid bulk cargo onto the ship at the terminal.\nThis method checks if the terminal is exporting or importing, allocates pipelines, and loads the cargo.\nIt also handles the storage of the loaded cargo in the port tanks and ensures that the tanks have enough capacity.\nIf the port tanks are empty, it activates a pipeline source to fill the tanks.\nIt also ensures that the loading process does not exceed the tank capacity.\nThe method logs events related to the loading process.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.terminal_liquid.LiquidTerminal.wait", "modulename": "simulation_classes.terminal_liquid", "qualname": "LiquidTerminal.wait", "kind": "function", "doc": "<p>Represents the waiting time of the vessel at the terminal after loading or unloading.\nThis method simulates the waiting time before the vessel departs the terminal.\nIt calculates the waiting time based on the liquid terminal efficiency and the cargo wait time.\nThe method logs events related to the waiting process.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.terminal_liquid.LiquidTerminal.detach_and_depart", "modulename": "simulation_classes.terminal_liquid", "qualname": "LiquidTerminal.detach_and_depart", "kind": "function", "doc": "<p>Represents the detachment of the ship from the berth and its departure from the terminal.\nThis method releases the allocated pipelines, puts the berth back into the port berths resource, and logs events related to the detachment and departure process.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.train", "modulename": "simulation_classes.train", "kind": "module", "doc": "<p>This module defines the Train class, which simulates the loading and unloading of cargo at a terminal.\nThe train processes cargo in batches, either importing or exporting based on the flags provided.</p>\n"}, {"fullname": "simulation_classes.train.Train", "modulename": "simulation_classes.train", "qualname": "Train", "kind": "class", "doc": "<p>Train class to simulate the loading and unloading of cargo at a terminal.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (simpy.Environment):</strong>  Simulation environment.</li>\n<li><strong>train_id (str):</strong>  Unique identifier for the train.</li>\n<li><strong>terminal_id (str):</strong>  Unique identifier for the terminal.</li>\n<li><strong>car_amount (int):</strong>  Number of cars in the train.</li>\n<li><strong>cargo_transfer_rate (float):</strong>  Rate at which cargo is transferred (e.g., pounds per hour).</li>\n<li><strong>racks (simpy.Resource):</strong>  Resource representing the unloading racks.</li>\n<li><strong>cargo_yard (simpy.Container):</strong>  Container representing the cargo yard.</li>\n<li><strong>train_events (dict):</strong>  Dictionary to log events related to the train.</li>\n<li><strong>transfer_amount (float):</strong>  Total amount of cargo to be transferred per car.</li>\n<li><strong>import_bool (bool):</strong>  Flag indicating if the train is importing cargo.</li>\n<li><strong>export_bool (bool):</strong>  Flag indicating if the train is exporting cargo.</li>\n<li><strong>cargo_type (str):</strong>  Type of cargo being handled (\"Container\" or \"Bulk\").</li>\n</ul>\n"}, {"fullname": "simulation_classes.train.Train.process", "modulename": "simulation_classes.train", "qualname": "Train.process", "kind": "function", "doc": "<p>Process to handle the train's loading and unloading operations.\nThis method initializes the train's event log, waits for the train to arrive,\nand then either imports or exports cargo based on the flags provided.\nIt also logs the time taken for each operation and the start/end times of each car.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.train.Train.import_cargo", "modulename": "simulation_classes.train", "qualname": "Train.import_cargo", "kind": "function", "doc": "<p>Import cargo into the train's cars.\nThis method processes the loading of cargo into the train's cars in batches.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>empty_cars (int):</strong>  Number of empty cars to be loaded with cargo.</li>\n</ul>\n\n<h6 id=\"yields\">Yields:</h6>\n\n<blockquote>\n  <p>simpy.Timeout: Waits for all cars in the batch to be loaded before proceeding.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">empty_cars</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.train.Train.export_cargo", "modulename": "simulation_classes.train", "qualname": "Train.export_cargo", "kind": "function", "doc": "<p>Export cargo from the train's cars.\nThis method processes the unloading of cargo from the train's cars in batches.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>full_cars (int):</strong>  Number of full cars to be unloaded.</li>\n</ul>\n\n<h6 id=\"yields\">Yields:</h6>\n\n<blockquote>\n  <p>simpy.Timeout: Waits for all cars in the batch to be unloaded before proceeding.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">full_cars</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.train.Train.load_car", "modulename": "simulation_classes.train", "qualname": "Train.load_car", "kind": "function", "doc": "<p>Load cargo into a single car of the train.\nThis method handles the loading of cargo into a car, including waiting for the racks\nand calculating the time taken for loading.</p>\n\n<h6 id=\"yields\">Yields:</h6>\n\n<blockquote>\n  <p>simpy.Timeout: Waits for the loading process to complete.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.train.Train.unload_car", "modulename": "simulation_classes.train", "qualname": "Train.unload_car", "kind": "function", "doc": "<p>Unload cargo from a single car of the train.\nThis method handles the unloading of cargo from a car, including waiting for the racks\nand calculating the time taken for unloading.</p>\n\n<h6 id=\"yields\">Yields:</h6>\n\n<blockquote>\n  <p>simpy.Timeout: Waits for the unloading process to complete.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.truck", "modulename": "simulation_classes.truck", "kind": "module", "doc": "<p>Creates class object for Trucks.</p>\n"}, {"fullname": "simulation_classes.truck.Truck", "modulename": "simulation_classes.truck", "qualname": "Truck", "kind": "class", "doc": "<p>Truck class to simulate the loading and unloading of trucks at different terminals.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (simpy.Environment):</strong>  Simulation environment.</li>\n<li><strong>liq_terminals_with_pipeline_source (list):</strong>  List of liquid terminals with pipeline source.</li>\n<li><strong>liq_terminals_with_pipeline_sink (list):</strong>  List of liquid terminals with pipeline sink.       </li>\n<li><strong>chassis_bays_utilization (dict):</strong>  Dictionary to track chassis bays utilization.</li>\n<li><strong>truck_id (int):</strong>  Unique identifier for the truck.</li>\n<li><strong>run_id (int):</strong>  Unique identifier for the simulation run.</li>\n<li><strong>terminal_type (str):</strong>  Type of the terminal (e.g., \"Container\", \"Liquid\", \"DryBulk\").</li>\n<li><strong>terminal_id (int):</strong>  Unique identifier for the terminal, starts from 1.</li>\n<li><strong>container_amount (tuple):</strong>  Amount of containers to load and unload.</li>\n<li><strong>liquid_amount (int):</strong>  Amount of liquid to load or unload.</li>\n<li><strong>drybulk_amount (int):</strong>  Amount of dry bulk to load or unload.</li>\n<li><strong>loading_bays (simpy.Resource):</strong>  Resource representing the loading bays.</li>\n<li><strong>port_tanks (simpy.Container):</strong>  Container representing the liquid storage tanks at the port.</li>\n<li><strong>truck_chassis (simpy.Resource):</strong>  Resource representing the truck chassis.</li>\n<li><strong>port_yard (simpy.Store):</strong>  Store representing the container yard at the port.</li>\n<li><strong>port_silos (simpy.Container):</strong>  Container representing the dry bulk storage silos at the port.</li>\n<li><strong>drybulk_bays (simpy.Resource):</strong>  Resource representing the dry bulk loading bays.</li>\n<li><strong>events (list):</strong>  List to store events for logging.</li>\n<li><strong>seed (int):</strong>  Random seed for reproducibility.</li>\n</ul>\n"}, {"fullname": "simulation_classes.truck.Truck.process", "modulename": "simulation_classes.truck", "qualname": "Truck.process", "kind": "function", "doc": "<p>Process to handle the truck loading and unloading at the terminal.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>seed (int):</strong>  Random seed for reproducibility.</li>\n<li><strong>run_id (int):</strong>  Unique identifier for the simulation run.</li>\n</ul>\n\n<h6 id=\"yields\">Yields:</h6>\n\n<blockquote>\n  <p>simpy.Process: The truck loading and unloading process.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seed</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.truck.Truck.tanker_truck", "modulename": "simulation_classes.truck", "qualname": "Truck.tanker_truck", "kind": "function", "doc": "<p>Process to handle the tanker truck loading and unloading at the liquid terminal.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>truck_id (str):</strong>  Unique identifier for the truck.</li>\n<li><strong>amount (int):</strong>  Amount of liquid to load or unload.</li>\n<li><strong>terminal_id (int):</strong>  Unique identifier for the terminal.</li>\n<li><strong>action (str):</strong>  Action to perform, either \"load\" or \"unload\".</li>\n<li><strong>seed (int):</strong>  Random seed for reproducibility.</li>\n</ul>\n\n<h6 id=\"yields\">Yields:</h6>\n\n<blockquote>\n  <p>simpy.Process: The tanker truck loading and unloading process.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">truck_id</span>, </span><span class=\"param\"><span class=\"n\">amount</span>, </span><span class=\"param\"><span class=\"n\">terminal_id</span>, </span><span class=\"param\"><span class=\"n\">action</span>, </span><span class=\"param\"><span class=\"n\">seed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.truck.Truck.drybulk_truck", "modulename": "simulation_classes.truck", "qualname": "Truck.drybulk_truck", "kind": "function", "doc": "<p>Process to handle the dry bulk truck loading and unloading at the dry bulk terminal.    </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>truck_id (str):</strong>  Unique identifier for the truck.</li>\n<li><strong>amount (int):</strong>  Amount of dry bulk to load or unload.</li>\n<li><strong>terminal_id (int):</strong>  Unique identifier for the terminal.</li>\n<li><strong>action (str):</strong>  Action to perform, either \"load\" or \"unload\".</li>\n<li><strong>seed (int):</strong>  Random seed for reproducibility.</li>\n</ul>\n\n<h6 id=\"yields\">Yields:</h6>\n\n<blockquote>\n  <p>simpy.Process: The dry bulk truck loading and unloading process.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">truck_id</span>, </span><span class=\"param\"><span class=\"n\">amount</span>, </span><span class=\"param\"><span class=\"n\">terminal_id</span>, </span><span class=\"param\"><span class=\"n\">action</span>, </span><span class=\"param\"><span class=\"n\">seed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_classes.truck.Truck.container_truck", "modulename": "simulation_classes.truck", "qualname": "Truck.container_truck", "kind": "function", "doc": "<p>Process to handle the container truck loading and unloading at the container terminal.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (int):</strong>  Unique identifier for the simulation run.</li>\n<li><strong>truck_id (str):</strong>  Unique identifier for the truck.</li>\n<li><strong>load_amount (int):</strong>  Amount of containers to load.</li>\n<li><strong>unload_amount (int):</strong>  Amount of containers to unload.</li>\n<li><strong>terminal_id (int):</strong>  Unique identifier for the terminal.</li>\n<li><strong>action (str):</strong>  Action to perform, either \"load\", \"unload\", or \"both\".</li>\n<li><strong>seed (int):</strong>  Random seed for reproducibility.</li>\n</ul>\n\n<h6 id=\"yields\">Yields:</h6>\n\n<blockquote>\n  <p>simpy.Process: The container truck loading and unloading process.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">run_id</span>,</span><span class=\"param\">\t<span class=\"n\">truck_id</span>,</span><span class=\"param\">\t<span class=\"n\">load_amount</span>,</span><span class=\"param\">\t<span class=\"n\">unload_amount</span>,</span><span class=\"param\">\t<span class=\"n\">terminal_id</span>,</span><span class=\"param\">\t<span class=\"n\">action</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler", "modulename": "simulation_handler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "simulation_handler.generators", "modulename": "simulation_handler.generators", "kind": "module", "doc": "<p>Generates resources and processes needed to run the simulation using the object classes defined in truck.py, Channel.py, and Port.py \nand the DES processes contained in ContainerTerminal.py, LiquidTerminal.py, and DryBulkTerminal.py.</p>\n"}, {"fullname": "simulation_handler.generators.initialize_rng", "modulename": "simulation_handler.generators", "qualname": "initialize_rng", "kind": "function", "doc": "<p>Initialize random state objects for repeatable randomness across runs.\nThis function sets the global random number generator states for both the built-in <code>random</code> module and NumPy's random module.\nThis is useful for ensuring that the simulation can be reproduced with the same random events.\nThis function should be called at the start of the simulation to ensure that all random processes are initialized with the same seed.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>seed (int):</strong>  The seed value for the random number generator.</li>\n</ul>\n\n<p>Returns:<br />\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.generators.update_availability", "modulename": "simulation_handler.generators", "qualname": "update_availability", "kind": "function", "doc": "<p>This function updates the availability of berths, yards, tanks, and silos at the port terminals.\nIt calculates the number of available and used resources for each terminal type (Container, Liquid, DryBulk) and appends this data to the respective DataFrames.\nThis function also tracks the queue lengths at each terminal type and updates the availability DataFrames with the current time and resource availability.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  The unique identifier for the simulation run.</li>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment.</li>\n<li><strong>it (int):</strong>  The current iteration of the simulation.</li>\n<li><strong>port_berths_container_terminals (list):</strong>  List of container terminal berths.</li>\n<li><strong>port_yard_container_terminals (list):</strong>  List of container terminal yards.</li>\n<li><strong>port_berths_liquid_terminals (list):</strong>  List of liquid terminal berths.</li>\n<li><strong>port_tanks_liquid_terminals (list):</strong>  List of liquid terminal tanks.</li>\n<li><strong>port_berths_drybulk_terminals (list):</strong>  List of dry bulk terminal berths.</li>\n<li><strong>port_silos_drybulk_terminals (list):</strong>  List of dry bulk terminal silos.</li>\n<li><strong>availability_df_container (pd.DataFrame):</strong>  DataFrame to store container terminal availability data.</li>\n<li><strong>availability_df_liquid (pd.DataFrame):</strong>  DataFrame to store liquid terminal availability data.</li>\n<li><strong>availability_df_drybulk (pd.DataFrame):</strong>  DataFrame to store dry bulk terminal availability data.</li>\n<li><strong>ship_data (dict):</strong>  Dictionary containing ship data for the simulation.</li>\n<li><strong>terminal_data (dict):</strong>  Dictionary containing terminal data for the simulation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>availability_df_container (pd.DataFrame): Updated DataFrame with container terminal availability data.\n  availability_df_liquid (pd.DataFrame): Updated DataFrame with liquid terminal availability data.\n  availability_df_drybulk (pd.DataFrame): Updated DataFrame with dry bulk terminal availability data.\n  queue_lengths_in_ctr (list): List of queue lengths in container terminals.\n  queue_lengths_in_liq (list): List of queue lengths in liquid terminals.\n  queue_lengths_in_drybulk (list): List of queue lengths in dry bulk terminals.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">run_id</span>,</span><span class=\"param\">\t<span class=\"n\">env</span>,</span><span class=\"param\">\t<span class=\"n\">it</span>,</span><span class=\"param\">\t<span class=\"n\">port_berths_container_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">port_yard_container_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">port_berths_liquid_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">port_tanks_liquid_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">port_berths_drybulk_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">port_silos_drybulk_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">availability_df_container</span>,</span><span class=\"param\">\t<span class=\"n\">availability_df_liquid</span>,</span><span class=\"param\">\t<span class=\"n\">availability_df_drybulk</span>,</span><span class=\"param\">\t<span class=\"n\">ship_data</span>,</span><span class=\"param\">\t<span class=\"n\">terminal_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.generators.create_containers", "modulename": "simulation_handler.generators", "qualname": "create_containers", "kind": "function", "doc": "<p>This function creates a list of Container objects to be loaded and unloaded from a ship.\nIt generates the number of containers based on the ship's information, specifically the width and the number of containers to load and unload.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ship_id (str):</strong>  The unique identifier for the ship.</li>\n<li><strong>ship_info (dict):</strong>  A dictionary containing information about the ship, including its width and the number of containers to load and unload.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>containers_to_unload (list): A list of Container objects representing the containers to be unloaded from the ship.\n  containers_to_load (list): A list of Container objects representing the containers to be loaded onto the ship.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ship_id</span>, </span><span class=\"param\"><span class=\"n\">ship_info</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.generators.tons_to_unload_load", "modulename": "simulation_handler.generators", "qualname": "tons_to_unload_load", "kind": "function", "doc": "<p>This function retrieves the number of tons to unload and load for a ship based on its information.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ship_id (str):</strong>  The unique identifier for the ship.</li>\n<li><strong>ship_info (dict):</strong>  A dictionary containing information about the ship, including the number of tons to unload and load.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>unload_tons (int): The number of tons to unload from the ship.\n  load_tons (int): The number of tons to load onto the ship.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ship_id</span>, </span><span class=\"param\"><span class=\"n\">ship_info</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.generators.ship_generator", "modulename": "simulation_handler.generators", "qualname": "ship_generator", "kind": "function", "doc": "<p>This function generates ships and processes them in the simulation environment.\nIt iterates through the ship data, simulating the arrival of each ship at the port and processing it based on its type (Container, Liquid, DryBulk).\nThe ContainerTerminal, LiquidTerminal, and DryBulkTerminal classes simulates the vessel's operations at the port.\nIt updates the availability of resources at the port terminals and tracks the number of ships in the channel and anchorage.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  The unique identifier for the simulation run.</li>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment.</li>\n<li><strong>chassis_bays_utilization (dict):</strong>  A dictionary to track chassis bays utilization.</li>\n<li><strong>port_berths_container_terminals (list):</strong>  List of container terminal berths.</li>\n<li><strong>port_yard_container_terminals (list):</strong>  List of container terminal yards.</li>\n<li><strong>port_berths_liquid_terminals (list):</strong>  List of liquid terminal berths.</li>\n<li><strong>port_tanks_liquid_terminals (list):</strong>  List of liquid terminal tanks.</li>\n<li><strong>port_berths_drybulk_terminals (list):</strong>  List of dry bulk terminal berths.</li>\n<li><strong>port_silos_drybulk_terminals (list):</strong>  List of dry bulk terminal silos.</li>\n<li><strong>channel (Channel):</strong>  The channel object for managing ship movements.</li>\n<li><strong>day_pilots (int):</strong>  Number of day pilots available.</li>\n<li><strong>night_pilots (int):</strong>  Number of night pilots available.</li>\n<li><strong>tugboats (int):</strong>  Number of tugboats available.</li>\n<li><strong>events (list):</strong>  List to store events during the simulation.</li>\n<li><strong>ship_logs (list):</strong>  List to store ship logs during the simulation.</li>\n<li><strong>channel_events (list):</strong>  List to store channel events during the simulation.</li>\n<li><strong>channel_logs (list):</strong>  List to store channel logs during the simulation.</li>\n<li><strong>SHIPS_IN_ANCHORAGE (list):</strong>  List to track ships in anchorage by type.</li>\n<li><strong>SHIPS_IN_CHANNEL (list):</strong>  List to track ships in the channel.</li>\n<li><strong>ship_data (dict):</strong>  Dictionary containing ship data for the simulation.</li>\n<li><strong>terminal_data (dict):</strong>  Dictionary containing terminal data for the simulation.</li>\n<li><strong>liq_terminals_with_pipeline_source (list):</strong>  List of liquid terminals with pipeline source connections.</li>\n<li><strong>liq_terminals_with_pipeline_sink (list):</strong>  List of liquid terminals with pipeline sink connections.</li>\n</ul>\n\n<h6 id=\"yields\">Yields:</h6>\n\n<blockquote>\n  <p>simpy.Timeout: A timeout event to simulate the arrival of each ship at the port.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">run_id</span>,</span><span class=\"param\">\t<span class=\"n\">env</span>,</span><span class=\"param\">\t<span class=\"n\">chassis_bays_utilization</span>,</span><span class=\"param\">\t<span class=\"n\">port_berths_container_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">port_yard_container_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">port_berths_liquid_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">port_tanks_liquid_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">port_berths_drybulk_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">port_silos_drybulk_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">channel</span>,</span><span class=\"param\">\t<span class=\"n\">day_pilots</span>,</span><span class=\"param\">\t<span class=\"n\">night_pilots</span>,</span><span class=\"param\">\t<span class=\"n\">tugboats</span>,</span><span class=\"param\">\t<span class=\"n\">events</span>,</span><span class=\"param\">\t<span class=\"n\">ship_logs</span>,</span><span class=\"param\">\t<span class=\"n\">channel_events</span>,</span><span class=\"param\">\t<span class=\"n\">channel_logs</span>,</span><span class=\"param\">\t<span class=\"n\">SHIPS_IN_ANCHORAGE</span>,</span><span class=\"param\">\t<span class=\"n\">SHIPS_IN_CHANNEL</span>,</span><span class=\"param\">\t<span class=\"n\">ship_data</span>,</span><span class=\"param\">\t<span class=\"n\">terminal_data</span>,</span><span class=\"param\">\t<span class=\"n\">liq_terminals_with_pipeline_source</span>,</span><span class=\"param\">\t<span class=\"n\">liq_terminals_with_pipeline_sink</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.generators.truck_generator", "modulename": "simulation_handler.generators", "qualname": "truck_generator", "kind": "function", "doc": "<p>This function generates trucks and processes them in the simulation environment.\nIt iterates through the truck data, simulating the arrival of each truck at the port and processing it based on its type (Container, Liquid, DryBulk).\nIt creates Truck objects and initializes them with the appropriate parameters based on the truck type and terminal information. (This simulates each truck's processing at the port.)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  The unique identifier for the simulation run.</li>\n<li><strong>liq_terminals_with_pipeline_source (list):</strong>  List of liquid terminals with pipeline source connections.</li>\n<li><strong>liq_terminals_with_pipeline_sink (list):</strong>  List of liquid terminals with pipeline sink connections.   </li>\n<li><strong>chassis_bays_utilization (dict):</strong>  A dictionary to track chassis bays utilization.</li>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment.</li>\n<li><strong>terminal_tuple_cache (dict):</strong>  A cache of terminal tuples for quick access to terminal data.</li>\n<li><strong>port_tanks_liquid_terminals (list):</strong>  List of liquid terminal tanks.</li>\n<li><strong>port_yard_container_terminals (list):</strong>  List of container terminal yards.</li>\n<li><strong>port_silos_drybulk_terminals (list):</strong>  List of dry bulk terminal silos.</li>\n<li><strong>port_loading_bays_liquid_terminals (list):</strong>  List of liquid terminal loading bays.</li>\n<li><strong>port_drybulk_bays_drybulk_terminals (list):</strong>  List of dry bulk terminal loading bays.</li>\n<li><strong>port_chassis_container_terminals (list):</strong>  List of container terminal chassis bays.</li>\n<li><strong>truck_gates_ctr (list):</strong>  List of container terminal truck gates.</li>\n<li><strong>truck_gates_liquid (list):</strong>  List of liquid terminal truck gates.</li>\n<li><strong>truck_gates_dk (list):</strong>  List of dry bulk terminal truck gates.</li>\n<li><strong>events (list):</strong>  List to store events during the simulation.</li>\n<li><strong>seed (int):</strong>  The seed value for the random number generator.</li>\n<li><strong>terminal_data (dict):</strong>  Dictionary containing terminal data for the simulation.</li>\n</ul>\n\n<h6 id=\"yields\">Yields:</h6>\n\n<blockquote>\n  <p>simpy.Timeout: A timeout event to simulate the arrival of each truck at the port.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">run_id</span>,</span><span class=\"param\">\t<span class=\"n\">liq_terminals_with_pipeline_source</span>,</span><span class=\"param\">\t<span class=\"n\">liq_terminals_with_pipeline_sink</span>,</span><span class=\"param\">\t<span class=\"n\">chassis_bays_utilization</span>,</span><span class=\"param\">\t<span class=\"n\">env</span>,</span><span class=\"param\">\t<span class=\"n\">terminal_tuple_cache</span>,</span><span class=\"param\">\t<span class=\"n\">port_tanks_liquid_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">port_yard_container_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">port_silos_drybulk_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">port_loading_bays_liquid_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">port_drybulk_bays_drybulk_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">port_chassis_container_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">truck_gates_ctr</span>,</span><span class=\"param\">\t<span class=\"n\">truck_gates_liquid</span>,</span><span class=\"param\">\t<span class=\"n\">truck_gates_dk</span>,</span><span class=\"param\">\t<span class=\"n\">events</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span>,</span><span class=\"param\">\t<span class=\"n\">terminal_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.generators.train_generator", "modulename": "simulation_handler.generators", "qualname": "train_generator", "kind": "function", "doc": "<p>This function generates trains and processes them in the simulation environment.\nIt iterates through the train data, simulating the arrival of each train at the port and processing it based on its cargo type (Container, Liquid, DryBulk).\nIt creates Train objects and initializes them with the appropriate parameters based on the train type and terminal information. (This simulates each train's processing at the port.)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  The unique identifier for the simulation run.</li>\n<li><strong>liq_terminals_with_pipeline_source (list):</strong>  List of liquid terminals with pipeline source connections.</li>\n<li><strong>liq_terminals_with_pipeline_sink (list):</strong>  List of liquid terminals with pipeline sink connections.</li>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment.</li>\n<li><strong>terminal_tuple_cache (dict):</strong>  A cache of terminal tuples for quick access to terminal data.</li>\n<li><strong>train_loading_racks_ctr (dict):</strong>  Dictionary of loading racks for container trains.</li>\n<li><strong>train_loading_racks_liquid (dict):</strong>  Dictionary of loading racks for liquid trains.</li>\n<li><strong>train_loading_racks_dk (dict):</strong>  Dictionary of loading racks for dry bulk trains.</li>\n<li><strong>train_events (list):</strong>  List to store train events during the simulation.</li>\n<li><strong>port_tanks_liquid_terminals (list):</strong>  List of liquid terminal tanks.</li>\n<li><strong>port_yard_container_terminals (list):</strong>  List of container terminal yards.</li>\n<li><strong>port_silos_drybulk_terminals (list):</strong>  List of dry bulk terminal silos.</li>\n<li><strong>seed (int):</strong>  The seed value for the random number generator.</li>\n</ul>\n\n<h6 id=\"yields\">Yields:</h6>\n\n<blockquote>\n  <p>simpy.Timeout: A timeout event to simulate the arrival of each train at the port.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">run_id</span>,</span><span class=\"param\">\t<span class=\"n\">liq_terminals_with_pipeline_source</span>,</span><span class=\"param\">\t<span class=\"n\">liq_terminals_with_pipeline_sink</span>,</span><span class=\"param\">\t<span class=\"n\">env</span>,</span><span class=\"param\">\t<span class=\"n\">terminal_tuple_cache</span>,</span><span class=\"param\">\t<span class=\"n\">train_loading_racks_ctr</span>,</span><span class=\"param\">\t<span class=\"n\">train_loading_racks_liquid</span>,</span><span class=\"param\">\t<span class=\"n\">train_loading_racks_dk</span>,</span><span class=\"param\">\t<span class=\"n\">train_events</span>,</span><span class=\"param\">\t<span class=\"n\">port_tanks_liquid_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">port_yard_container_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">port_silos_drybulk_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.generators.data_logger", "modulename": "simulation_handler.generators", "qualname": "data_logger", "kind": "function", "doc": "<p>This function logs the availability of pilots and tugboats at the port over time.\nIt creates a DataFrame to store the time, number of day pilots, night pilots, and tugboats available at each time step.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  The unique identifier for the simulation run.</li>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment.</li>\n<li><strong>pilots_tugs_data (pd.DataFrame):</strong>  DataFrame to store pilots and tugboats data.</li>\n<li><strong>day_pilots (simpy.Resource):</strong>  Resource representing day pilots.</li>\n<li><strong>night_pilots (simpy.Resource):</strong>  Resource representing night pilots.</li>\n<li><strong>tugboats (simpy.Resource):</strong>  Resource representing tugboats.</li>\n</ul>\n\n<h6 id=\"yields\">Yields:</h6>\n\n<blockquote>\n  <p>simpy.Timeout: A timeout event to log the data at each time step.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">env</span>, </span><span class=\"param\"><span class=\"n\">pilots_tugs_data</span>, </span><span class=\"param\"><span class=\"n\">day_pilots</span>, </span><span class=\"param\"><span class=\"n\">night_pilots</span>, </span><span class=\"param\"><span class=\"n\">tugboats</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.helpers", "modulename": "simulation_handler.helpers", "kind": "module", "doc": "<p>Helper functions for the simulation environment.\nThis module contains various utility functions for logging, data cleaning,\nand random number generation used in the simulation.</p>\n"}, {"fullname": "simulation_handler.helpers.log_line", "modulename": "simulation_handler.helpers", "qualname": "log_line", "kind": "function", "doc": "<p>Logs a line to a specified file in the run's logs directory.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the log.</li>\n<li><strong>filename (str):</strong>  Name of the file to log the line.</li>\n<li><strong>line (str):</strong>  The line to log.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: Appends the line to the specified log file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">line</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.helpers.save_warning", "modulename": "simulation_handler.helpers", "qualname": "save_warning", "kind": "function", "doc": "<p>Save a warning message to the logs directory for the current run.\nIf the logs directory does not exist, it will be created.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  The identifier for the current run.</li>\n<li><strong>message (str):</strong>  The warning message to be saved.</li>\n<li><strong>print_val (bool):</strong>  Whether to print the message to the console. Default is True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">message</span>, </span><span class=\"param\"><span class=\"n\">print_val</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.helpers.clear_env", "modulename": "simulation_handler.helpers", "qualname": "clear_env", "kind": "function", "doc": "<p>Clear the environment and interrupt all processes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (Simpy.Environment):</strong>  The simulation environment to be cleared.</li>\n<li><strong>ship_proc (Simpy.Process):</strong>  The process for handling ships.</li>\n<li><strong>truck_proc (Simpy.Process):</strong>  The process for handling trucks.</li>\n<li><strong>train_proc (Simpy.Process):</strong>  The process for handling trains.</li>\n<li><strong>data_taker_proc:</strong>  The process for taking data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span>, </span><span class=\"param\"><span class=\"n\">ship_proc</span>, </span><span class=\"param\"><span class=\"n\">truck_proc</span>, </span><span class=\"param\"><span class=\"n\">train_proc</span>, </span><span class=\"param\"><span class=\"n\">data_taker_proc</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.helpers.clear_logs", "modulename": "simulation_handler.helpers", "qualname": "clear_logs", "kind": "function", "doc": "<p>Clear the logs directory for the current run by removing all files and subdirectories.\nThen create the necessary subdirectories again.\nThis function is useful for resetting the logs directory before starting a new simulation run.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  The identifier for the current run.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.helpers.clean_results_directory", "modulename": "simulation_handler.helpers", "qualname": "clean_results_directory", "kind": "function", "doc": "<p>Remove existing result files and directories matching the pattern <code>.Results*</code>.\nThis function is useful for cleaning up the results directory before starting a new simulation run.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.helpers.initialize_rng", "modulename": "simulation_handler.helpers", "qualname": "initialize_rng", "kind": "function", "doc": "<p>Initialize random state objects for repeatable randomness across runs.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>seed (int):</strong>  The seed value for the random number generator.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.helpers.clean_data", "modulename": "simulation_handler.helpers", "qualname": "clean_data", "kind": "function", "doc": "<p>Clean the terminal data by parsing ranges and converting them to tuples.\nThis function reads a CSV file containing terminal data, processes the range strings,\nand converts them into tuples of integers or floats.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>directory (str):</strong>  The directory where the terminal data CSV file is located.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DataFrame: A DataFrame containing the cleaned terminal data with ranges parsed into tuples.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">directory</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.helpers.create_terminal_data_cache", "modulename": "simulation_handler.helpers", "qualname": "create_terminal_data_cache", "kind": "function", "doc": "<p>Create a cache dictionary from terminal data for quick access to resource values.\nThis function initializes a random number generator with a given seed,\niterates through the terminal data, and populates a cache dictionary with keys\nbased on cargo type, terminal ID, and resource name. If the resource value is a range,\nit stores a random integer from that range; otherwise, it stores the value directly.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>terminal_data (pd.DataFrame):</strong>  The DataFrame containing terminal data.</li>\n<li><strong>run_id (str):</strong>  The identifier for the current run, used for logging.</li>\n<li><strong>seed (int):</strong>  The seed value for the random number generator.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: A dictionary where keys are tuples of (cargo_type, terminal_id, resource_name)\n        and values are the corresponding resource values or random integers from ranges.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">terminal_data</span>, </span><span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">seed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.helpers.get_value_by_terminal", "modulename": "simulation_handler.helpers", "qualname": "get_value_by_terminal", "kind": "function", "doc": "<p>Retrieve a value from the terminal data cache based on cargo type, terminal ID, and resource name.\nThis function checks the cache for a specific key and returns the corresponding value.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>terminal_data_cache (dict):</strong>  The cache dictionary containing terminal data.</li>\n<li><strong>cargo_type (str):</strong>  The type of cargo.</li>\n<li><strong>terminal_id (str):</strong>  The ID of the terminal.</li>\n<li><strong>resource_name (str):</strong>  The name of the resource.</li>\n</ul>\n\n<p>Returns:<br />\n    The value associated with the specified cargo type, terminal ID, and resource name,\n    or None if the key does not exist in the cache.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">terminal_data_cache</span>, </span><span class=\"param\"><span class=\"n\">cargo_type</span>, </span><span class=\"param\"><span class=\"n\">terminal_id</span>, </span><span class=\"param\"><span class=\"n\">resource_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.helpers.create_terminal_tuple_cache", "modulename": "simulation_handler.helpers", "qualname": "create_terminal_tuple_cache", "kind": "function", "doc": "<p>Create a cache dictionary from terminal data for quick access to resource values as tuples.\nThis function initializes a random number generator with a given seed,\niterates through the terminal data, and populates a cache dictionary with keys\nbased on cargo type, terminal ID, and resource name. If the resource value is a range,\nit stores the range as a tuple; otherwise, it stores the value as a tuple of itself.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>terminal_data (pd.DataFrame):</strong>  The DataFrame containing terminal data.   </li>\n<li><strong>run_id (str):</strong>  The identifier for the current run, used for logging.</li>\n<li><strong>seed (int):</strong>  The seed value for the random number generator.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: A dictionary where keys are tuples of (cargo_type, terminal_id, resource_name)\n        and values are tuples of the corresponding resource values or ranges.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">terminal_data</span>, </span><span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">seed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.helpers.get_value_from_terminal_tuple", "modulename": "simulation_handler.helpers", "qualname": "get_value_from_terminal_tuple", "kind": "function", "doc": "<p>Retrieve a value from the terminal tuple cache based on cargo type, terminal ID, and resource name.\nThis function checks the cache for a specific key and returns a random integer from the range stored in the tuple.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>terminal_tuple_cache (dict):</strong>  The cache dictionary containing terminal data as tuples.</li>\n<li><strong>cargo_type (str):</strong>  The type of cargo.        </li>\n<li><strong>terminal_id (str):</strong>  The ID of the terminal.</li>\n<li><strong>resource_name (str):</strong>  The name of the resource.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: A random integer from the range stored in the tuple for the specified cargo type, terminal ID, and resource name.\n  If the key does not exist in the cache, it returns None.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">terminal_tuple_cache</span>, </span><span class=\"param\"><span class=\"n\">cargo_type</span>, </span><span class=\"param\"><span class=\"n\">terminal_id</span>, </span><span class=\"param\"><span class=\"n\">resource_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.helpers.get_values_by_terminal_random_sample", "modulename": "simulation_handler.helpers", "qualname": "get_values_by_terminal_random_sample", "kind": "function", "doc": "<p>Get a list of random samples from the terminal data based on cargo type and terminal ID.\nThis function retrieves a specific resource value from the terminal data for a given cargo type and terminal ID,\nand generates a list of random samples from that value. If the value is a range, it samples from that range;\notherwise, it returns a list with the value repeated for the specified number of samples.  </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>terminal_data (pd.DataFrame):</strong>  The DataFrame containing terminal data.</li>\n<li><strong>cargo_type (str):</strong>  The type of cargo.</li>\n<li><strong>terminal_id (str):</strong>  The ID of the terminal.</li>\n<li><strong>resource_name_input (str):</strong>  The name of the resource to sample from.</li>\n<li><strong>num_samples (int):</strong>  The number of random samples to generate.</li>\n<li><strong>seed (int):</strong>  The seed value for the random number generator.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: A list of random samples from the specified resource value.\n  If the resource value is a range, it returns random integers from that range;\n  otherwise, it returns a list with the value repeated for the specified number of samples.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">terminal_data</span>,</span><span class=\"param\">\t<span class=\"n\">cargo_type</span>,</span><span class=\"param\">\t<span class=\"n\">terminal_id</span>,</span><span class=\"param\">\t<span class=\"n\">resource_name_input</span>,</span><span class=\"param\">\t<span class=\"n\">num_samples</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.helpers.is_daytime", "modulename": "simulation_handler.helpers", "qualname": "is_daytime", "kind": "function", "doc": "<p>Check if the given time is within the daytime range.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time (int or float):</strong>  The time to check, in hours (0-23).</li>\n<li><strong>start (int):</strong>  The start of the daytime range (default is 6).</li>\n<li><strong>end (int):</strong>  The end of the daytime range (default is 18).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the time is within the daytime range, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">time</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">6</span>, </span><span class=\"param\"><span class=\"n\">end</span><span class=\"o\">=</span><span class=\"mi\">18</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.helpers.normal_random_with_sd", "modulename": "simulation_handler.helpers", "qualname": "normal_random_with_sd", "kind": "function", "doc": "<p>Generate a random value from a truncated normal distribution with specified mean and standard deviation.\nThe distribution is truncated to ensure the value is within a specified range based on the mean and standard deviation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mu (float):</strong>  The mean of the normal distribution.</li>\n<li><strong>sigma (float):</strong>  The standard deviation of the normal distribution.</li>\n<li><strong>seed (int):</strong>  Random seed for reproducibility.</li>\n<li><strong>scale_factor (float):</strong>  Factor to scale the standard deviation for truncation (default is 1).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: A random value from the truncated normal distribution, ensuring it is within the range [a, b].</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mu</span>, </span><span class=\"param\"><span class=\"n\">sigma</span>, </span><span class=\"param\"><span class=\"n\">seed</span>, </span><span class=\"param\"><span class=\"n\">scale_factor</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.helpers.normal_random_with_limit", "modulename": "simulation_handler.helpers", "qualname": "normal_random_with_limit", "kind": "function", "doc": "<p>Generate a random value from a truncated normal distribution between a and b.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a (float):</strong>  Lower limit of the range.</li>\n<li><strong>b (float):</strong>  Upper limit of the range.</li>\n<li><strong>seed (int):</strong>  Random seed for reproducibility.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: A random value from the truncated normal distribution.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"n\">seed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.preprocess", "modulename": "simulation_handler.preprocess", "kind": "module", "doc": "<p>This module generates ship, truck, and train data for a maritime simulation.\nIt includes functions to initialize random number generators, generate truncated exponential distributions,\nselect terminals based on ship type and size, and create ship and truck data based on predefined probabilities.\nIt also provides functions to fill ship details, generate random sizes, and create ship and truck data dictionaries.</p>\n"}, {"fullname": "simulation_handler.preprocess.initialize_rng", "modulename": "simulation_handler.preprocess", "qualname": "initialize_rng", "kind": "function", "doc": "<p>Initialize random state objects for repeatable randomness across runs.\nThis function sets up two random number generators: one using Python's built-in <code>random</code> module\nand another using NumPy's random number generator. This allows for consistent random behavior\nacross different runs of the simulation, which is crucial for debugging and testing.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>seed (int):</strong>  The seed value to initialize the random number generators.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.preprocess.truncated_exponential", "modulename": "simulation_handler.preprocess", "qualname": "truncated_exponential", "kind": "function", "doc": "<p>Generate a truncated exponential random variable.<br />\nThis function generates a random variable from an exponential distribution\ntruncated to the interval [a, b]. If the generated value exceeds b, it is set to b.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a (float):</strong>  The lower bound of the truncation interval.</li>\n<li><strong>b (float):</strong>  The upper bound of the truncation interval.</li>\n<li><strong>scale (float):</strong>  The scale parameter of the exponential distribution.</li>\n<li><strong>ship_type (str):</strong>  Type of ship ('Container', 'Liquid', 'DryBulk').</li>\n<li><strong>ship_terminal (int):</strong>  Terminal number where the ship is located.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: A random variable from the truncated exponential distribution.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"n\">scale</span>, </span><span class=\"param\"><span class=\"n\">ship_type</span>, </span><span class=\"param\"><span class=\"n\">ship_terminal</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.preprocess.truncated_exponential_advanced", "modulename": "simulation_handler.preprocess", "qualname": "truncated_exponential_advanced", "kind": "function", "doc": "<p>Generate a truncated exponential random variable with advanced truncation.\nThis function generates a random variable from an exponential distribution\ntruncated to the interval [a, b]. If the generated value exceeds b, it is set to b.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a (float):</strong>  The lower bound of the truncation interval.</li>\n<li><strong>b (float):</strong>  The upper bound of the truncation interval.</li>\n<li><strong>scale (float):</strong>  The scale parameter of the exponential distribution.</li>\n<li><strong>ship_type (str):</strong>  Type of ship ('Container', 'Liquid', 'DryBulk').</li>\n<li><strong>ship_terminal (int):</strong>  Terminal number where the ship is located.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: A random variable from the truncated exponential distribution.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"n\">scale</span>, </span><span class=\"param\"><span class=\"n\">ship_type</span>, </span><span class=\"param\"><span class=\"n\">ship_terminal</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.preprocess.select_terminal", "modulename": "simulation_handler.preprocess", "qualname": "select_terminal", "kind": "function", "doc": "<p>Select terminal based on probability based on number of berths in that terminal to the total number of berths in all terminal of that type.\nThis function selects a terminal for a ship based on its type and beam size.\nIf the ship is larger than a certain beam size, it selects from a limited set of terminals.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ship_type (str):</strong>  Type of ship ('Container', 'Liquid', 'DryBulk').</li>\n<li><strong>ship_beam (float):</strong>  Beam size of the ship.</li>\n<li><strong>num_terminals (list):</strong>  List containing the number of terminals for each type of ship [num_container_terminals, num_liquid_terminals, num_drybulk_terminals].</li>\n<li><strong>seed (int):</strong>  Random seed for reproducibility.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: Selected terminal number based on the ship type and beam size.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ship_type</span>, </span><span class=\"param\"><span class=\"n\">ship_beam</span>, </span><span class=\"param\"><span class=\"n\">num_terminals</span>, </span><span class=\"param\"><span class=\"n\">seed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.preprocess.assign_random_size", "modulename": "simulation_handler.preprocess", "qualname": "assign_random_size", "kind": "function", "doc": "<p>Assign a random size to a ship based on its type.\nThis function uses predefined probabilities to assign a size category ('Small', 'Medium', 'Large') to a ship.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ship_type (str):</strong>  Type of ship ('Container', 'DryBulk', 'Liquid').</li>\n<li><strong>probabilities (dict):</strong>  Dictionary containing size probabilities for each ship type.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Assigned size category ('Small', 'Medium', 'Large') or NaN if ship type is invalid.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ship_type</span>, </span><span class=\"param\"><span class=\"n\">probabilities</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.preprocess.generate_ship_data", "modulename": "simulation_handler.preprocess", "qualname": "generate_ship_data", "kind": "function", "doc": "<p>Generate ship data for a specific ship type.<br />\nThis function generates a dictionary of ship data for a given ship type, including ship ID, direction, ship type, and size.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ship_type (str):</strong>  Type of ship ('Container', 'DryBulk', 'Liquid').</li>\n<li><strong>NUM_SHIPS (dict):</strong>  Dictionary containing the number of ships for each ship type.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: Dictionary containing ship data for the specified ship type.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ship_type</span>, </span><span class=\"param\"><span class=\"n\">NUM_SHIPS</span>, </span><span class=\"param\"><span class=\"n\">probabilities</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.preprocess.fill_ship_details", "modulename": "simulation_handler.preprocess", "qualname": "fill_ship_details", "kind": "function", "doc": "<p>Fill ship details such as length, beam, draft, tonnage, pilots, and tugboats based on the ship type and size.\nThis function retrieves the average and standard deviation values for ship dimensions and tonnage from a DataFrame\ncontaining vessel size data. It then samples from a normal distribution to generate realistic ship dimensions and tonnage.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>row (pd.Series):</strong>  A row from the ship data DataFrame containing ship type and size.</li>\n<li><strong>vessel_sizes (pd.DataFrame):</strong>  DataFrame containing vessel size information with average and standard deviation values.</li>\n<li><strong>seed (int):</strong>  Random seed for reproducibility.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.Series: A Series containing the generated ship details: length, beam, draft, tonnage, pilots, and tugboats.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">row</span>, </span><span class=\"param\"><span class=\"n\">vessel_sizes</span>, </span><span class=\"param\"><span class=\"n\">seed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.preprocess.generate_truck_data", "modulename": "simulation_handler.preprocess", "qualname": "generate_truck_data", "kind": "function", "doc": "<p>Generate truck data for a specific truck type.\nThis function generates a dictionary of truck data for a given truck type, including truck ID, direction, and truck type.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>truck_type (str):</strong>  Type of truck ('Container', 'DryBulk', 'Liquid').</li>\n<li><strong>NUM_TRUCKS (dict):</strong>  Dictionary containing the number of trucks for each truck type.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: Dictionary containing truck data for the specified truck type.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">truck_type</span>, </span><span class=\"param\"><span class=\"n\">NUM_TRUCKS</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.preprocess.generate_ships", "modulename": "simulation_handler.preprocess", "qualname": "generate_ships", "kind": "function", "doc": "<p>Generate ship data for the simulation.\nThis function creates a DataFrame containing ship data for different types of ships (Container, Liquid, DryBulk).\nIt initializes the random number generator, generates ship data based on predefined probabilities,\nand assigns ship details such as length, beam, draft, tonnage, pilots, tugboats, and terminal.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  Unique identifier for the simulation run.</li>\n<li><strong>NUM_TERMINALS_LIST (list):</strong>  List containing the number of terminals for each ship type [num_container_terminals, num_liquid_terminals, num_drybulk_terminals].</li>\n<li><strong>seed (int):</strong>  Random seed for reproducibility.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">NUM_TERMINALS_LIST</span>, </span><span class=\"param\"><span class=\"n\">seed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.preprocess.generate_trucks", "modulename": "simulation_handler.preprocess", "qualname": "generate_trucks", "kind": "function", "doc": "<p>Generate truck data for the simulation.\nThis function creates a DataFrame containing truck data for different types of trucks (Container, Liquid, DryBulk).\nIt initializes the random number generator, calculates mean interarrival times for trucks at each terminal,\ngenerates truck data based on the mean interarrival times, and assigns terminal information to each truck.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  Unique identifier for the simulation run.</li>\n<li><strong>num_terminals (list):</strong>  List containing the number of terminals for each truck type [num_container_terminals, num_liquid_terminals, num_drybulk_terminals].</li>\n<li><strong>terminal_data_df (pd.DataFrame):</strong>  DataFrame containing terminal data.</li>\n<li><strong>terminal_tuple_cache (dict):</strong>  Dictionary containing terminal tuple cache.</li>\n<li><strong>seed (int):</strong>  Random seed for reproducibility.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">num_terminals</span>, </span><span class=\"param\"><span class=\"n\">terminal_data_df</span>, </span><span class=\"param\"><span class=\"n\">terminal_tuple_cache</span>, </span><span class=\"param\"><span class=\"n\">seed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.preprocess.generate_trains", "modulename": "simulation_handler.preprocess", "qualname": "generate_trains", "kind": "function", "doc": "<p>Generate train data for the simulation.\nThis function creates a DataFrame containing train data for different types of trains (Container, Liquid, DryBulk).\nIt initializes the random number generator, calculates mean interarrival times for trains at each terminal,\ngenerates train data based on the mean interarrival times, and assigns terminal information to each train.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  Unique identifier for the simulation run.</li>\n<li><strong>num_terminals (list):</strong>  List containing the number of terminals for each train type [num_container_terminals, num_liquid_terminals, num_drybulk_terminals].</li>\n<li><strong>terminal_data (pd.DataFrame):</strong>  DataFrame containing terminal data.</li>\n<li><strong>terminal_data_df (pd.DataFrame):</strong>  DataFrame containing terminal data.</li>\n<li><strong>terminal_tuple_cache (dict):</strong>  Dictionary containing terminal tuple cache.</li>\n<li><strong>seed (int):</strong>  Random seed for reproducibility.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">run_id</span>,</span><span class=\"param\">\t<span class=\"n\">num_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">terminal_data</span>,</span><span class=\"param\">\t<span class=\"n\">terminal_data_df</span>,</span><span class=\"param\">\t<span class=\"n\">terminal_tuple_cache</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.preprocess.get_piplines_import", "modulename": "simulation_handler.preprocess", "qualname": "get_piplines_import", "kind": "function", "doc": "<p>Get the list of liquid terminals that have pipelines as source or sink.\nThis function checks each liquid terminal to see if it has a pipeline source or sink.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_terminals_list (tuple):</strong>  A tuple containing the number of terminals for each type of ship (num_container_terminals, num_liquid_terminals, num_drybulk_terminals).</li>\n<li><strong>terminal_data (pd.DataFrame):</strong>  DataFrame containing terminal data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: Two lists containing the liquid terminals with pipeline sources and sinks.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_terminals_list</span>, </span><span class=\"param\"><span class=\"n\">terminal_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.run_simulation", "modulename": "simulation_handler.run_simulation", "kind": "module", "doc": "<p>This module runs the port simulation, generating ships, trucks, and trains,\ncreating resources, and executing the simulation until the specified time.</p>\n"}, {"fullname": "simulation_handler.run_simulation.print_memory_usage", "modulename": "simulation_handler.run_simulation", "qualname": "print_memory_usage", "kind": "function", "doc": "<p>Print the current memory usage of the process.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_handler.run_simulation.run_simulation", "modulename": "simulation_handler.run_simulation", "qualname": "run_simulation", "kind": "function", "doc": "<p>Run the port simulation with the given seed.\nThis function initializes the simulation environment, generates ships, trucks, and trains,\ncreates resources, and runs the simulation until the specified time.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>seed (int):</strong>  Random seed for reproducibility.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis", "modulename": "simulation_analysis", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "simulation_analysis.capacity", "modulename": "simulation_analysis.capacity", "kind": "module", "doc": "<p>This module provides functions to analyze the capacity of a queueing system,\ncalculate the ultimate capacity, and solve differential equations related to queue dynamics.</p>\n"}, {"fullname": "simulation_analysis.capacity.calculate_mean_wait_time", "modulename": "simulation_analysis.capacity", "qualname": "calculate_mean_wait_time", "kind": "function", "doc": "<p>Calculate the mean wait time for a queueing system given arrival rates and queue lengths.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>arrival_rates (list):</strong>  List of 3 arrival rates for the queues.</li>\n<li><strong>queue_lengths (list):</strong>  List of 3 queue lengths for the queues.</li>\n<li><strong>input_mean_wait_time (float):</strong>  The input mean wait time to compare against.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: A dictionary with calculated service rates, mean wait time, and relative error.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arrival_rates</span>, </span><span class=\"param\"><span class=\"n\">queue_lengths</span>, </span><span class=\"param\"><span class=\"n\">input_mean_wait_time</span>, </span><span class=\"param\"><span class=\"n\">logfilename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.capacity.dN_dlambda", "modulename": "simulation_analysis.capacity", "qualname": "dN_dlambda", "kind": "function", "doc": "<p>Differential equation for N with respect to lambda.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lambda_ (float):</strong>  The current value of lambda.</li>\n<li><strong>T (float):</strong>  Total time in hours.</li>\n<li><strong>N (float):</strong>  Current value of N.</li>\n<li><strong>Cu (float):</strong>  Ultimate capacity.</li>\n<li><strong>theta (float):</strong>  Degree of congestion.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The derivative of N with respect to lambda.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lambda_</span>, </span><span class=\"param\"><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"n\">N</span>, </span><span class=\"param\"><span class=\"n\">Cu</span>, </span><span class=\"param\"><span class=\"n\">theta</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.capacity.solve_N", "modulename": "simulation_analysis.capacity", "qualname": "solve_N", "kind": "function", "doc": "<p>Solve the ODE for N using the initial condition N(0) = 0.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lambda_eval (array):</strong>  Array of lambda values for evaluation.</li>\n<li><strong>Cu (float):</strong>  Ultimate capacity.</li>\n<li><strong>T (float):</strong>  Total time in hours.</li>\n<li><strong>theta (float):</strong>  Degree of congestion.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>array: Solution for N at the given lambda values.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lambda_eval</span>, </span><span class=\"param\"><span class=\"n\">Cu</span>, </span><span class=\"param\"><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"n\">theta</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.capacity.objective", "modulename": "simulation_analysis.capacity", "qualname": "objective", "kind": "function", "doc": "<p>Objective function to minimize the difference between predicted and actual N values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>params (list):</strong>  List containing Cu and theta.</li>\n<li><strong>constant_args (list):</strong>  List containing a, b, c, d, and T.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: Sum of squared differences between predicted and actual N values.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">params</span>, </span><span class=\"param\"><span class=\"n\">constant_args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.capacity.calculate_ultimate_capacity", "modulename": "simulation_analysis.capacity", "qualname": "calculate_ultimate_capacity", "kind": "function", "doc": "<p>Auto\u2010discover all scenario logs (BASE + others), but only read\n'Operating capacity:' from the BASE file. Fit dN/d\u03bb = T<em>(1 - (N/(Cu</em>T))**\u03b8),\nwrite results, and plot every sample labeled.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.collate_results", "modulename": "simulation_analysis.collate_results", "kind": "module", "doc": "<p>This script collates results from multiple simulation runs, generates plots, and calculates statistics.\nTODO: Break down into smaller functions for better readability and maintainability.</p>\n"}, {"fullname": "simulation_analysis.collate_results.collate_results", "modulename": "simulation_analysis.collate_results", "qualname": "collate_results", "kind": "function", "doc": "<p>Collates results from multiple simulation runs and generates various plots and statistics.\nThe function creates directories for storing results, processes data from each run, \nand generates plots for wait times, queue lengths, and channel utilization.\nIt also calculates mean wait times, standard deviations, and other statistics for different ship types.\nThe results are saved in a folder structure under 'collatedResults'.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_runs (int):</strong>  Number of simulation runs to collate.</li>\n<li><strong>total_time (int):</strong>  Total time for the simulation in hours.</li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_runs</span>, </span><span class=\"param\"><span class=\"n\">total_time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.collate_results.compute_throughput", "modulename": "simulation_analysis.collate_results", "qualname": "compute_throughput", "kind": "function", "doc": "<h6 id=\"compute-throughput-for-a-single-run-given-paths-to\">Compute throughput for a single run given paths to:</h6>\n\n<blockquote>\n  <ul>\n  <li>logs_fp: Excel/CSV with 'Ship_Id' and 'End Time'</li>\n  <li>data_fp: CSV with 'ship_id', 'ship_type',\n  'num_container_or_liq_tons_or_dry_tons_to_load',\n  'num_container_or_liq_tons_or_dry_tons_to_unload'</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>{\n    \"total\": float,\n    \"by_type\": { \"<type>\": float, ... },\n    \"ships_exited\": int,\n    \"exited_ids\": list[str]\n  }</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>KeyError / ValueError with clear messages if required columns are missing</li>\n<li>or (if strict_missing=True) any exited ship isn't found in ship_data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">logs_fp</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data_fp</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">strict_missing</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_map</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.resource_utilization", "modulename": "simulation_analysis.resource_utilization", "kind": "module", "doc": "<p>This module provides functions to analyze bottlenecks in a simulation run.\nIt includes parsing report files, collecting utilization data, plotting utilization trends,\nsaving mean utilization, and analyzing channel restrictions.</p>\n"}, {"fullname": "simulation_analysis.resource_utilization.parse_report", "modulename": "simulation_analysis.resource_utilization", "qualname": "parse_report", "kind": "function", "doc": "<p>Parses a report file to extract the timestep and utilization data for each resource.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file_path (str):</strong>  The path to the report file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: A tuple containing the timestep (float) and a dictionary with utilization data.\n         The dictionary has resource names as keys and another dictionary as values,\n         which contains terminal names and their respective utilization percentages.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.resource_utilization.collect_data_from_reports", "modulename": "simulation_analysis.resource_utilization", "qualname": "collect_data_from_reports", "kind": "function", "doc": "<p>Collects utilization data from all report files in the specified directory.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>directory (str):</strong>  The path to the directory containing report files.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: A dictionary where keys are resource names and values are dictionaries containing\n        timesteps and utilization data for each terminal.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">directory</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.resource_utilization.save_mean_utilization", "modulename": "simulation_analysis.resource_utilization", "qualname": "save_mean_utilization", "kind": "function", "doc": "<p>Saves the mean utilization of a specific resource across all terminals to a text file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (dict):</strong>  The utilization data collected from report files.</li>\n<li><strong>resource (str):</strong>  The name of the resource to analyze.</li>\n<li><strong>output_dir (str):</strong>  The directory where the output file will be saved.</li>\n<li><strong>run_id (str):</strong>  The run identifier for the simulation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">resource</span>, </span><span class=\"param\"><span class=\"n\">output_dir</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.resource_utilization.plot_utilization", "modulename": "simulation_analysis.resource_utilization", "qualname": "plot_utilization", "kind": "function", "doc": "<p>Plots the utilization of a specific resource across all terminals over time.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (dict):</strong>  The utilization data collected from report files.</li>\n<li><strong>resource (str):</strong>  The name of the resource to analyze.</li>\n<li><strong>run_id (str):</strong>  The run identifier for the simulation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">resource</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.resource_utilization.save_utilization_thresholds", "modulename": "simulation_analysis.resource_utilization", "qualname": "save_utilization_thresholds", "kind": "function", "doc": "<p>Saves the percentage of time each terminal's utilization is above specified thresholds.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (dict):</strong>  The utilization data collected from report files.</li>\n<li><strong>resource (str):</strong>  The name of the resource to analyze.</li>\n<li><strong>output_dir (str):</strong>  The directory where the output file will be saved.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: A tuple containing the thresholds and a dictionary with utilization percentages for each terminal.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">resource</span>, </span><span class=\"param\"><span class=\"n\">output_dir</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.resource_utilization.plot_utilization_thresholds", "modulename": "simulation_analysis.resource_utilization", "qualname": "plot_utilization_thresholds", "kind": "function", "doc": "<p>Plots the percentage of time each terminal's utilization is above specified thresholds.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>thresholds (list):</strong>  The list of utilization thresholds.</li>\n<li><strong>utilization_percentages (dict):</strong>  A dictionary with utilization percentages for each terminal.</li>\n<li><strong>resource (str):</strong>  The name of the resource to analyze.</li>\n<li><strong>output_dir (str):</strong>  The directory where the plots will be saved.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">thresholds</span>, </span><span class=\"param\"><span class=\"n\">utilization_percentages</span>, </span><span class=\"param\"><span class=\"n\">resource</span>, </span><span class=\"param\"><span class=\"n\">output_dir</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.resource_utilization.parse_restrictions", "modulename": "simulation_analysis.resource_utilization", "qualname": "parse_restrictions", "kind": "function", "doc": "<p>Parses a string of restrictions into a dictionary.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>restriction_str (str):</strong>  A string containing restrictions in the format \"B:1.0, D:2.0, DL:3.0, T:4.0\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: A dictionary with restriction types as keys and their values as floats.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">restriction_str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.resource_utilization.save_individual_restriction_plots", "modulename": "simulation_analysis.resource_utilization", "qualname": "save_individual_restriction_plots", "kind": "function", "doc": "<p>Saves individual restriction plots for \"In\" and \"Out\" phases.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data_in (pd.Series):</strong>  Series containing the \"In\" phase data.</li>\n<li><strong>data_out (pd.Series):</strong>  Series containing the \"Out\" phase data.</li>\n<li><strong>title (str):</strong>  Title for the plots.</li>\n<li><strong>folder_name (str):</strong>  Folder name where the plots will be saved.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_in</span>, </span><span class=\"param\"><span class=\"n\">data_out</span>, </span><span class=\"param\"><span class=\"n\">title</span>, </span><span class=\"param\"><span class=\"n\">folder_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.resource_utilization.channel_restriction_analysis", "modulename": "simulation_analysis.resource_utilization", "qualname": "channel_restriction_analysis", "kind": "function", "doc": "<p>Analyzes channel restrictions based on the ship logs and generates histograms and plots.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  The run identifier for the simulation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.resource_utilization.terminal_analysis", "modulename": "simulation_analysis.resource_utilization", "qualname": "terminal_analysis", "kind": "function", "doc": "<p>Analyzes terminal utilization data and generates plots and reports.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  The run identifier for the simulation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.resource_utilization.bottleneckAnalysis", "modulename": "simulation_analysis.resource_utilization", "qualname": "bottleneckAnalysis", "kind": "function", "doc": "<p>Main function to run the bottleneck simulation_analysis.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  The run identifier for the simulation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results", "modulename": "simulation_analysis.results", "kind": "module", "doc": "<p>Creates output logs and plots for interpreting and analyzing results.</p>\n"}, {"fullname": "simulation_analysis.results.plot_process_chart", "modulename": "simulation_analysis.results", "qualname": "plot_process_chart", "kind": "function", "doc": "<h1 id=\"todo-ensure-this-is-compatible-with-the-new-event-structure\">TODO: Ensure this is compatible with the new event structure.</h1>\n\n<p>Generates process charts for each terminal based on the events.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>events (list):</strong>  List of events where each event is a tuple containing:\n(event_name, terminal_type, terminal_id, event_type, time, additional_info)</li>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the plots.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: Saves process charts as images in the specified directory.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">events</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.plot_dwell_times", "modulename": "simulation_analysis.results", "qualname": "plot_dwell_times", "kind": "function", "doc": "<p>Generates plots for dwell times and turn times of ships at terminals.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>events (list):</strong>  List of events where each event is a tuple containing:\n(ship_name, terminal_type, terminal_id, event_type, time, additional_info)</li>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the plots.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: Saves plots as images in the specified directory.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">events</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.analyze_turn_time_ships", "modulename": "simulation_analysis.results", "qualname": "analyze_turn_time_ships", "kind": "function", "doc": "<p>Analyze the turn times and dwell times of ships from the Excel file and save the results to a report.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the report.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: Saves the analysis results to a text file in the specified directory.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.plot_queues", "modulename": "simulation_analysis.results", "qualname": "plot_queues", "kind": "function", "doc": "<p>Plots the number of ships in the channel over time.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>SHIPS_IN_CHANNEL_TRACK (list):</strong>  List of tuples containing time and number of ships in the channel.</li>\n<li><strong>name (str):</strong>  Name of the ship type (e.g., \"Container\", \"Liquid\", \"Dry Bulk\").</li>\n<li><strong>place (str):</strong>  Place where the ships are tracked (e.g., \"Port\").</li>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the plot.</li>\n</ul>\n\n<p>Returns:<br />\n    None: Saves the plot as a PDF file in the specified directory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">SHIPS_IN_CHANNEL_TRACK</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">place</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.track_utilization", "modulename": "simulation_analysis.results", "qualname": "track_utilization", "kind": "function", "doc": "<p>Calculates the mean utilization of resources (berths and yards) for container, liquid, and dry bulk terminals.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>container_data (pd.DataFrame):</strong>  DataFrame containing container terminal data.</li>\n<li><strong>liquid_data (pd.DataFrame):</strong>  DataFrame containing liquid terminal data.</li>\n<li><strong>drybulk_data (pd.DataFrame):</strong>  DataFrame containing dry bulk terminal data.</li>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the results.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: A list containing the mean utilization of resources for each terminal type.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">container_data</span>, </span><span class=\"param\"><span class=\"n\">liquid_data</span>, </span><span class=\"param\"><span class=\"n\">drybulk_data</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.get_utilization", "modulename": "simulation_analysis.results", "qualname": "get_utilization", "kind": "function", "doc": "<p>Calculates the mean utilization of resources (berths and yards) for container, liquid, and dry bulk terminals.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>container_data (pd.DataFrame):</strong>  DataFrame containing container terminal data.</li>\n<li><strong>liquid_data (pd.DataFrame):</strong>  DataFrame containing liquid terminal data.</li>\n<li><strong>drybulk_data (pd.DataFrame):</strong>  DataFrame containing dry bulk terminal data.</li>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the results.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: A list containing the mean utilization of resources for each terminal type.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">container_data</span>, </span><span class=\"param\"><span class=\"n\">liquid_data</span>, </span><span class=\"param\"><span class=\"n\">drybulk_data</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.add_to_report", "modulename": "simulation_analysis.results", "qualname": "add_to_report", "kind": "function", "doc": "<p>Adds the mean utilization of a resource to the report lines.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>report_lines (list):</strong>  List of report lines to which the utilization will be added.</li>\n<li><strong>resource (str):</strong>  Name of the resource (e.g., \"Container berth\", \"Liquid storage\").</li>\n<li><strong>utilization (dict):</strong>  Dictionary containing the mean utilization for each terminal.</li>\n<li><strong>overall_utilization (float):</strong>  Overall mean utilization for the resource.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: Appends the utilization information to the report lines.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">report_lines</span>, </span><span class=\"param\"><span class=\"n\">resource</span>, </span><span class=\"param\"><span class=\"n\">utilization</span>, </span><span class=\"param\"><span class=\"n\">overall_utilization</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.save_track_list", "modulename": "simulation_analysis.results", "qualname": "save_track_list", "kind": "function", "doc": "<p>Saves the utilization track list to a text file for the given timestep.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the report.</li>\n<li><strong>timestep (int):</strong>  The current timestep for which the report is generated.</li>\n<li><strong>track_list (list):</strong>  List containing the mean utilization of resources for each terminal type.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: Saves the report to a text file in the specified directory.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">timestep</span>, </span><span class=\"param\"><span class=\"n\">track_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.gen_train_df", "modulename": "simulation_analysis.results", "qualname": "gen_train_df", "kind": "function", "doc": "<p>Generates a DataFrame from the train events and saves it to a CSV file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>train_events (dict):</strong>  Dictionary containing train events where keys are event names and values are lists of event data.</li>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the DataFrame.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DataFrame: DataFrame containing the train events.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">train_events</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.get_dists", "modulename": "simulation_analysis.results", "qualname": "get_dists", "kind": "function", "doc": "<p>Analyzes the ship logs to calculate the mean, min, max, and standard deviation of various time distributions for each terminal type.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the analysis results.</li>\n<li><strong>plot (bool):</strong>  Whether to generate and save plots of the time distributions.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: A tuple containing the mean, min, max, and standard deviation DataFrames for each terminal type.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.plot_channel", "modulename": "simulation_analysis.results", "qualname": "plot_channel", "kind": "function", "doc": "<p>Plots the channel sections and their respective terminals.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the plot.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: Saves the plot as a PDF file in the specified directory.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.ship_data_csv_1", "modulename": "simulation_analysis.results", "qualname": "ship_data_csv_1", "kind": "function", "doc": "<p>Parses the ship data from the log file and saves it to a CSV file. \nThe CSV file contains information about each ship's entry and exit times in the channel sections.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the CSV file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DataFrame: DataFrame containing the parsed ship data.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.ship_data_csv_2", "modulename": "simulation_analysis.results", "qualname": "ship_data_csv_2", "kind": "function", "doc": "<p>Parses the ship data from the log file and saves it to a CSV file with time spent in each section.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the CSV file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DataFrame: DataFrame containing the parsed ship data with time spent in each section.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.ships_in_channel_analysis", "modulename": "simulation_analysis.results", "qualname": "ships_in_channel_analysis", "kind": "function", "doc": "<p>Analyzes the ships in the channel by reading the ship data from a text file, calculating the time spent in each section, and generating a time series of ships in the channel.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the analysis results.</li>\n<li><strong>plot (bool):</strong>  Whether to generate and save plots of the channel utilization.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: Saves the analysis results to CSV files and generates plots if <code>plot</code> is True.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.ships_in_anchorage_analysis", "modulename": "simulation_analysis.results", "qualname": "ships_in_anchorage_analysis", "kind": "function", "doc": "<p>Analyzes the ships in anchorage by reading the ship data from a CSV file, calculating the cumulative arrivals and channel entries, and generating a time series of ships waiting in anchorage.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ship_type (str):</strong>  Type of ships to analyze ('all', 'Container', 'Liquid', 'DryBulk').</li>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the analysis results.</li>\n<li><strong>plot (bool):</strong>  Whether to generate and save plots of the anchorage queue.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: Saves the analysis results to CSV files and generates plots if <code>plot</code> is True.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ship_type</span>, </span><span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.create_truck_csv", "modulename": "simulation_analysis.results", "qualname": "create_truck_csv", "kind": "function", "doc": "<p>Read truck_data.txt, parse into a DataFrame, save as CSV under ./<run_id>/truck_data.csv,\nand return the DataFrame.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the truck data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DataFrame: DataFrame containing the truck data with columns for truck ID, start time, dwell time, terminal ID, terminal type, and arrival time.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.plot_dwell_by_type", "modulename": "simulation_analysis.results", "qualname": "plot_dwell_by_type", "kind": "function", "doc": "<p>Plots the dwell time distribution of trucks by terminal type.   </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the plots.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: Saves the plots as PDF files in the specified directories.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.plot_dwell_by_terminal", "modulename": "simulation_analysis.results", "qualname": "plot_dwell_by_terminal", "kind": "function", "doc": "<p>Plots the dwell time distribution of trucks by terminal type and terminal ID.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the plots.          </li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: Saves the plots as PDF files in the specified directories.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.plot_arrival_distributions", "modulename": "simulation_analysis.results", "qualname": "plot_arrival_distributions", "kind": "function", "doc": "<p>Plots the arrival time distribution of trucks by terminal type and terminal ID.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the plots.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: Saves the plots as JPEG files in the specified directories.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.delete_truck_data_csv", "modulename": "simulation_analysis.results", "qualname": "delete_truck_data_csv", "kind": "function", "doc": "<p>Delete the truck_data.csv file if it exists and save the truck data as a pickle file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the truck data as a pickle file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: Deletes the truck_data.csv file and saves the truck data as a pickle file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.update_ship_logs", "modulename": "simulation_analysis.results", "qualname": "update_ship_logs", "kind": "function", "doc": "<p>Updates the ship logs with the provided information. If a log with the same Ship ID exists, it updates the existing log; otherwise, it appends a new log.\nNote 1: The ship type is represented by a single character (e.g., \"C\" for Container, \"L\" for Liquid, \"D\" for Dry Bulk).\nNote 2: If the log already exists, it updates the existing log with the new values, ignoring 'nan' values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ship_logs (list):</strong>  List of existing ship logs.</li>\n<li><strong>ship_type (str):</strong>  Type of the ship (e.g., \"C\" for Container, \"L\" for Liquid, \"D\" for Dry Bulk).</li>\n<li><strong>ship_id (int):</strong>  Unique identifier for the ship.</li>\n<li><strong>selected_terminal (str):</strong>  The terminal where the ship is directed.</li>\n<li><strong>ship_start_time (str):</strong>  Start time of the ship's operation.</li>\n<li><strong>time_to_get_berth (str):</strong>  Time taken to get to the berth.</li>\n<li><strong>time_for_restriction_in (str):</strong>  Time for restriction in.</li>\n<li><strong>time_to_get_pilot_in (str):</strong>  Time taken to get the pilot in.</li>\n<li><strong>time_to_get_tugs_in (str):</strong>  Time taken to get tugs in.</li>\n<li><strong>time_to_common_channel_in (str):</strong>  Time taken to get to the common channel in.</li>\n<li><strong>time_to_travel_channel_in (str):</strong>  Time taken to travel the channel in.</li>\n<li><strong>time_to_tug_steer_in (str):</strong>  Time taken for tug steering in.</li>\n<li><strong>unloading_time (str):</strong>  Time taken for unloading.</li>\n<li><strong>loading_time (str):</strong>  Time taken for loading.</li>\n<li><strong>waiting_time (str):</strong>  Time spent waiting.</li>\n<li><strong>departure_time (str):</strong>  Departure time of the ship.</li>\n<li><strong>time_to_get_pilot_out (str):</strong>  Time taken to get the pilot out.</li>\n<li><strong>time_to_get_tugs_out (str):</strong>  Time taken to get tugs out.</li>\n<li><strong>time_to_tug_steer_out (str):</strong>  Time taken for tug steering out.</li>\n<li><strong>time_for_restriction_out (str):</strong>  Time for restriction out.</li>\n<li><strong>time_for_uturn (str):</strong>  Time taken for U-turn.</li>\n<li><strong>time_to_travel_channel_out (str):</strong>  Time taken to travel the channel out.</li>\n<li><strong>time_to_common_channel_out (str):</strong>  Time taken to get to the common channel out.</li>\n<li><strong>ship_end_time (str):</strong>  End time of the ship's operation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: Updated ship logs with the new or modified log entry.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ship_logs</span>,</span><span class=\"param\">\t<span class=\"n\">ship_type</span>,</span><span class=\"param\">\t<span class=\"n\">ship_id</span>,</span><span class=\"param\">\t<span class=\"n\">selected_terminal</span>,</span><span class=\"param\">\t<span class=\"n\">ship_start_time</span><span class=\"o\">=</span><span class=\"s1\">&#39;nan&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">time_to_get_berth</span><span class=\"o\">=</span><span class=\"s1\">&#39;nan&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">time_for_restriction_in</span><span class=\"o\">=</span><span class=\"s1\">&#39;nan&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">time_to_get_pilot_in</span><span class=\"o\">=</span><span class=\"s1\">&#39;nan&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">time_to_get_tugs_in</span><span class=\"o\">=</span><span class=\"s1\">&#39;nan&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">time_to_common_channel_in</span><span class=\"o\">=</span><span class=\"s1\">&#39;nan&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">time_to_travel_channel_in</span><span class=\"o\">=</span><span class=\"s1\">&#39;nan&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">time_to_tug_steer_in</span><span class=\"o\">=</span><span class=\"s1\">&#39;nan&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">unloading_time</span><span class=\"o\">=</span><span class=\"s1\">&#39;nan&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">loading_time</span><span class=\"o\">=</span><span class=\"s1\">&#39;nan&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">waiting_time</span><span class=\"o\">=</span><span class=\"s1\">&#39;nan&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">departure_time</span><span class=\"o\">=</span><span class=\"s1\">&#39;nan&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">time_to_get_pilot_out</span><span class=\"o\">=</span><span class=\"s1\">&#39;nan&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">time_to_get_tugs_out</span><span class=\"o\">=</span><span class=\"s1\">&#39;nan&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">time_to_tug_steer_out</span><span class=\"o\">=</span><span class=\"s1\">&#39;nan&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">time_for_restriction_out</span><span class=\"o\">=</span><span class=\"s1\">&#39;nan&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">time_for_uturn</span><span class=\"o\">=</span><span class=\"s1\">&#39;nan&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">time_to_travel_channel_out</span><span class=\"o\">=</span><span class=\"s1\">&#39;nan&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">time_to_common_channel_out</span><span class=\"o\">=</span><span class=\"s1\">&#39;nan&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ship_end_time</span><span class=\"o\">=</span><span class=\"s1\">&#39;nan&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.analyse_bays_chassis_utilization", "modulename": "simulation_analysis.results", "qualname": "analyse_bays_chassis_utilization", "kind": "function", "doc": "<p>Generates plots for chassis and bay utilization at each terminal type.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>chassis_bays_utilization (dict):</strong>  Dictionary containing chassis and bay utilization data for each terminal type.</li>\n<li><strong>num_terminals_list (list):</strong>  List containing the number of terminals for each terminal type.</li>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the plots.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: Saves the plots as PDF files in the specified directory.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chassis_bays_utilization</span>, </span><span class=\"param\"><span class=\"n\">num_terminals_list</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.gen_logs_and_plots", "modulename": "simulation_analysis.results", "qualname": "gen_logs_and_plots", "kind": "function", "doc": "<p>Generates logs and plots from the provided ship logs, events, chassis and bay utilization data, train events, and channel logs.\nSaves the logs to an Excel file and generates various plots including process charts, dwell times, turn times, truck dwell times, and channel utilization.\nAlso generates utilization reports for resources such as berths and yards.</p>\n\n<h6 id=\"the-following-plots-are-generated\">The following plots are generated:</h6>\n\n<blockquote>\n  <ul>\n  <li>Process chart for ship operations</li>\n  <li>Dwell time chart for ships</li>\n  <li>Turn time analysis for ships</li>\n  <li>Truck dwell times and arrival times at terminals</li>\n  <li>Channel utilization over time</li>\n  <li>Chassis and bay utilization at each terminal type</li>\n  </ul>\n</blockquote>\n\n<p>The results are saved in the specified run directory.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the logs and plots.</li>\n<li><strong>ship_logs (list):</strong>  List of ship logs containing information about each ship's operations.</li>\n<li><strong>events (list):</strong>  List of events where each event is a tuple containing:\n(event_type, time, name, terminal_id, terminal_type)</li>\n<li><strong>chassis_bays_utilization (dict):</strong>  Dictionary containing chassis and bay utilization data for each terminal type.</li>\n<li><strong>num_terminals_list (list):</strong>  List containing the number of terminals for each terminal type.</li>\n<li><strong>train_events (dict):</strong>  Dictionary containing train events where keys are event names and values are lists of event data.</li>\n<li><strong>channel_logs (list):</strong>  List of channel logs containing information about the channel's operations.</li>\n<li><strong>channel_events (list):</strong>  List of channel events where each event is a tuple containing:\n(event_type, time, name, section_id, section_type)</li>\n<li><strong>channel (object):</strong>  Channel object containing sections and their respective containers.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: Saves the logs and plots in the specified directory.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">run_id</span>,</span><span class=\"param\">\t<span class=\"n\">ship_logs</span>,</span><span class=\"param\">\t<span class=\"n\">events</span>,</span><span class=\"param\">\t<span class=\"n\">chassis_bays_utilization</span>,</span><span class=\"param\">\t<span class=\"n\">num_terminals_list</span>,</span><span class=\"param\">\t<span class=\"n\">train_events</span>,</span><span class=\"param\">\t<span class=\"n\">channel_logs</span>,</span><span class=\"param\">\t<span class=\"n\">channel_events</span>,</span><span class=\"param\">\t<span class=\"n\">channel</span>,</span><span class=\"param\">\t<span class=\"n\">animate</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.results.animate_channel_usage", "modulename": "simulation_analysis.results", "qualname": "animate_channel_usage", "kind": "function", "doc": "<p>DEPRICIATED\nAnimates the channel usage over time, showing width and draft utilization.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  Unique identifier for the run to save the animation.</li>\n<li><strong>channel (object):</strong>  Channel object containing sections and their respective containers.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: Saves the animation as a GIF file in the specified directory.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">channel</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.whatif_scenarios", "modulename": "simulation_analysis.whatif_scenarios", "kind": "module", "doc": "<p>This module contains functions to model disruptions in a port simulation environment.</p>\n"}, {"fullname": "simulation_analysis.whatif_scenarios.reduce_cranes", "modulename": "simulation_analysis.whatif_scenarios", "qualname": "reduce_cranes", "kind": "function", "doc": "<p>This function reduces the number of cranes in each berth by <code>change</code> amount by removing cranes from the berth's crane store between <code>time_start</code> and <code>time_end</code>.\nIt also restores the cranes after the reduction period.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment.</li>\n<li><strong>change (int):</strong>  The number of cranes to be removed (negative value) or added (positive value).</li>\n<li><strong>terminals (list):</strong>  List of terminal indices where the cranes will be reduced.</li>\n<li><strong>time_start (int):</strong>  The time at which the reduction starts.</li>\n<li><strong>time_end (int):</strong>  The time at which the reduction ends.</li>\n<li><strong>port_berths_container_terminals (dict):</strong>  Dictionary containing berth information for container terminals.</li>\n<li><strong>terminal_data_cache (dict):</strong>  Cache containing terminal data for crane transfer rates.</li>\n<li><strong>berths_aff_per (float):</strong>  Percentage of berths to be affected by the change.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env</span>,</span><span class=\"param\">\t<span class=\"n\">change</span>,</span><span class=\"param\">\t<span class=\"n\">terminals</span>,</span><span class=\"param\">\t<span class=\"n\">time_start</span>,</span><span class=\"param\">\t<span class=\"n\">time_end</span>,</span><span class=\"param\">\t<span class=\"n\">port_berths_container_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">terminal_data_cache</span>,</span><span class=\"param\">\t<span class=\"n\">berths_aff_per</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.whatif_scenarios.reduce_pipelines", "modulename": "simulation_analysis.whatif_scenarios", "qualname": "reduce_pipelines", "kind": "function", "doc": "<p>This function reduces the number of pipelines in each berth by <code>change</code> amount by removing pipelines from the berth's pipeline store between <code>time_start</code> and <code>time_end</code>.\nIt also restores the pipelines after the reduction period.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment.</li>\n<li><strong>change (int):</strong>  The number of pipelines to be removed (negative value) or added (positive value).</li>\n<li><strong>terminals (list):</strong>  List of terminal indices where the pipelines will be reduced.</li>\n<li><strong>time_start (int):</strong>  The time at which the reduction starts.</li>\n<li><strong>time_end (int):</strong>  The time at which the reduction ends.</li>\n<li><strong>port_berth_liquid_terminals (dict):</strong>  Dictionary containing berth information for liquid terminals.</li>\n<li><strong>terminal_data_cache (dict):</strong>  Cache containing terminal data for pipeline transfer rates.</li>\n<li><strong>berths_aff_per (float):</strong>  Percentage of berths to be affected by the change.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env</span>,</span><span class=\"param\">\t<span class=\"n\">change</span>,</span><span class=\"param\">\t<span class=\"n\">terminals</span>,</span><span class=\"param\">\t<span class=\"n\">time_start</span>,</span><span class=\"param\">\t<span class=\"n\">time_end</span>,</span><span class=\"param\">\t<span class=\"n\">port_berth_liquid_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">terminal_data_cache</span>,</span><span class=\"param\">\t<span class=\"n\">berths_aff_per</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.whatif_scenarios.reduce_conveyors", "modulename": "simulation_analysis.whatif_scenarios", "qualname": "reduce_conveyors", "kind": "function", "doc": "<p>This function reduces the number of conveyors in each berth by <code>change</code> amount by removing conveyors from the berth's conveyor store between <code>time_start</code> and <code>time_end</code>.\nIt also restores the conveyors after the reduction period.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment.</li>\n<li><strong>change (int):</strong>  The number of conveyors to be removed (negative value) or added (positive value).</li>\n<li><strong>terminals (list):</strong>  List of terminal indices where the conveyors will be reduced.</li>\n<li><strong>time_start (int):</strong>  The time at which the reduction starts.</li>\n<li><strong>time_end (int):</strong>  The time at which the reduction ends.   </li>\n<li><strong>port_berth_drybulk_terminals (dict):</strong>  Dictionary containing berth information for dry bulk terminals.</li>\n<li><strong>terminal_data_cache (dict):</strong>  Cache containing terminal data for conveyor transfer rates.</li>\n<li><strong>berths_aff_per (float):</strong>  Percentage of berths to be affected by the change.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env</span>,</span><span class=\"param\">\t<span class=\"n\">change</span>,</span><span class=\"param\">\t<span class=\"n\">terminals</span>,</span><span class=\"param\">\t<span class=\"n\">time_start</span>,</span><span class=\"param\">\t<span class=\"n\">time_end</span>,</span><span class=\"param\">\t<span class=\"n\">port_berth_drybulk_terminals</span>,</span><span class=\"param\">\t<span class=\"n\">terminal_data_cache</span>,</span><span class=\"param\">\t<span class=\"n\">berths_aff_per</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.whatif_scenarios.reduce_berths", "modulename": "simulation_analysis.whatif_scenarios", "qualname": "reduce_berths", "kind": "function", "doc": "<p>This function reduces the number of berths in each terminal by <code>change</code> amount by removing berths from the terminal's berth store between <code>time_start</code> and <code>time_end</code>.\nIt also restores the berths after the reduction period.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment.</li>\n<li><strong>change (int):</strong>  The number of berths to be removed (negative value) or added (positive value).</li>\n<li><strong>terminals (list):</strong>  List of terminal indices where the berths will be reduced.        </li>\n<li><strong>time_start (int):</strong>  The time at which the reduction starts.</li>\n<li><strong>time_end (int):</strong>  The time at which the reduction ends.</li>\n<li><strong>port_berths_terminal (dict):</strong>  Dictionary containing berth information for the terminals.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span>, </span><span class=\"param\"><span class=\"n\">change</span>, </span><span class=\"param\"><span class=\"n\">terminals</span>, </span><span class=\"param\"><span class=\"n\">time_start</span>, </span><span class=\"param\"><span class=\"n\">time_end</span>, </span><span class=\"param\"><span class=\"n\">port_berths_terminal</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.whatif_scenarios.reduce_yard", "modulename": "simulation_analysis.whatif_scenarios", "qualname": "reduce_yard", "kind": "function", "doc": "<p>This function reduces the yard capacity in each terminal by <code>change</code> amount by adding dummy containers to the terminal's yard store between <code>time_start</code> and <code>time_end</code>.\nIt also restores the yard capacity after the reduction period.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment.</li>\n<li><strong>change (int):</strong>  The number of yard spaces to be removed (negative value) or added (positive value).</li>\n<li><strong>terminals (list):</strong>  List of terminal indices where the yard capacity will be reduced.</li>\n<li><strong>time_start (int):</strong>  The time at which the reduction starts.</li>\n<li><strong>time_end (int):</strong>  The time at which the reduction ends.</li>\n<li><strong>port_yard_container_terminals (dict):</strong>  Dictionary containing yard information for the terminals.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env</span>,</span><span class=\"param\">\t<span class=\"n\">change</span>,</span><span class=\"param\">\t<span class=\"n\">terminals</span>,</span><span class=\"param\">\t<span class=\"n\">time_start</span>,</span><span class=\"param\">\t<span class=\"n\">time_end</span>,</span><span class=\"param\">\t<span class=\"n\">port_yard_container_terminals</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.whatif_scenarios.reduce_tank_capacity", "modulename": "simulation_analysis.whatif_scenarios", "qualname": "reduce_tank_capacity", "kind": "function", "doc": "<p>This function reduces the tank capacity in each terminal by <code>change</code> amount by adding dummy liquid to the terminal's tank store between <code>time_start</code> and <code>time_end</code>.\nIt also restores the tank capacity after the reduction period.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment.</li>\n<li><strong>change (int):</strong>  The number of tank spaces to be removed (negative value) or added (positive value).</li>\n<li><strong>terminals (list):</strong>  List of terminal indices where the tank capacity will be reduced.</li>\n<li><strong>time_start (int):</strong>  The time at which the reduction starts.</li>\n<li><strong>time_end (int):</strong>  The time at which the reduction ends.</li>\n<li><strong>port_tanks_liquid_terminals (dict):</strong>  Dictionary containing tank information for the terminals.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env</span>,</span><span class=\"param\">\t<span class=\"n\">change</span>,</span><span class=\"param\">\t<span class=\"n\">terminals</span>,</span><span class=\"param\">\t<span class=\"n\">time_start</span>,</span><span class=\"param\">\t<span class=\"n\">time_end</span>,</span><span class=\"param\">\t<span class=\"n\">port_tanks_liquid_terminals</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.whatif_scenarios.reduce_silo_capacity", "modulename": "simulation_analysis.whatif_scenarios", "qualname": "reduce_silo_capacity", "kind": "function", "doc": "<p>This function reduces the silo capacity in each terminal by <code>change</code> amount by adding dummy dry bulk to the terminal's silo store between <code>time_start</code> and <code>time_end</code>.\nIt also restores the silo capacity after the reduction period.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment.</li>\n<li><strong>change (int):</strong>  The number of silo spaces to be removed (negative value) or added (positive value).</li>\n<li><strong>terminals (list):</strong>  List of terminal indices where the silo capacity will be reduced.</li>\n<li><strong>time_start (int):</strong>  The time at which the reduction starts.</li>\n<li><strong>time_end (int):</strong>  The time at which the reduction ends.</li>\n<li><strong>port_silos_drybulk_terminals (dict):</strong>  Dictionary containing silo information for the terminals.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env</span>,</span><span class=\"param\">\t<span class=\"n\">change</span>,</span><span class=\"param\">\t<span class=\"n\">terminals</span>,</span><span class=\"param\">\t<span class=\"n\">time_start</span>,</span><span class=\"param\">\t<span class=\"n\">time_end</span>,</span><span class=\"param\">\t<span class=\"n\">port_silos_drybulk_terminals</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.whatif_scenarios.reduce_bay_capacity", "modulename": "simulation_analysis.whatif_scenarios", "qualname": "reduce_bay_capacity", "kind": "function", "doc": "<p>This function reduces the bay capacity in each terminal by <code>reduction</code> amount by holding requests for bays in the terminal's bay store between <code>start_time</code> and <code>end_time</code>.\nIt also restores the bay capacity after the reduction period.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment.</li>\n<li><strong>reduction (int):</strong>  The number of bays to be removed (negative value) or added (positive value).</li>\n<li><strong>terminals (list):</strong>  List of terminal indices where the bay capacity will be reduced.</li>\n<li><strong>start_time (int):</strong>  The time at which the reduction starts.</li>\n<li><strong>end_time (int):</strong>  The time at which the reduction ends.</li>\n<li><strong>port_loading_bays_liquid_terminals (dict):</strong>  Dictionary containing bay information for the terminals.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env</span>,</span><span class=\"param\">\t<span class=\"n\">reduction</span>,</span><span class=\"param\">\t<span class=\"n\">terminals</span>,</span><span class=\"param\">\t<span class=\"n\">start_time</span>,</span><span class=\"param\">\t<span class=\"n\">end_time</span>,</span><span class=\"param\">\t<span class=\"n\">port_loading_bays_liquid_terminals</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.whatif_scenarios.reduce_chassis", "modulename": "simulation_analysis.whatif_scenarios", "qualname": "reduce_chassis", "kind": "function", "doc": "<p>This function reduces the chassis capacity in each terminal by <code>change</code> amount by removing chassis from the terminal's chassis store between <code>time_start</code> and <code>time_end</code>.\nIt also restores the chassis capacity after the reduction period.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment.</li>\n<li><strong>change (int):</strong>  The number of chassis to be removed (negative value) or added (positive value).</li>\n<li><strong>terminals (list):</strong>  List of terminal indices where the chassis capacity will be reduced.</li>\n<li><strong>time_start (int):</strong>  The time at which the reduction starts.</li>\n<li><strong>time_end (int):</strong>  The time at which the reduction ends.</li>\n<li><strong>port_chassis_container_terminals (dict):</strong>  Dictionary containing chassis information for the terminals.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env</span>,</span><span class=\"param\">\t<span class=\"n\">change</span>,</span><span class=\"param\">\t<span class=\"n\">terminals</span>,</span><span class=\"param\">\t<span class=\"n\">time_start</span>,</span><span class=\"param\">\t<span class=\"n\">time_end</span>,</span><span class=\"param\">\t<span class=\"n\">port_chassis_container_terminals</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.whatif_scenarios.reduce_truck_gates", "modulename": "simulation_analysis.whatif_scenarios", "qualname": "reduce_truck_gates", "kind": "function", "doc": "<p>This function reduces the truck gate capacity in each terminal by <code>reduction</code> amount by holding requests for truck gates in the terminal's truck gate store between <code>start_time</code> and <code>end_time</code>.\nIt also restores the truck gate capacity after the reduction period.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment.</li>\n<li><strong>reduction (int):</strong>  The number of truck gates to be removed (negative value) or added (positive value).</li>\n<li><strong>terminals (list):</strong>  List of terminal indices where the truck gate capacity will be reduced.</li>\n<li><strong>start_time (int):</strong>  The time at which the reduction starts.</li>\n<li><strong>end_time (int):</strong>  The time at which the reduction ends.</li>\n<li><strong>truck_gates (dict):</strong>  Dictionary containing truck gate information for the terminals.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span>, </span><span class=\"param\"><span class=\"n\">reduction</span>, </span><span class=\"param\"><span class=\"n\">terminals</span>, </span><span class=\"param\"><span class=\"n\">start_time</span>, </span><span class=\"param\"><span class=\"n\">end_time</span>, </span><span class=\"param\"><span class=\"n\">truck_gates</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.whatif_scenarios.adjust_arrival_rate", "modulename": "simulation_analysis.whatif_scenarios", "qualname": "adjust_arrival_rate", "kind": "function", "doc": "<p>This function adjusts the arrival times of ships in the ship data CSV file by a given rate parameter.\nIt modifies the arrival times of ships that fall within the specified time range and saves the updated data back to the CSV file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>start_time (float):</strong>  The start time of the range to adjust arrival times.</li>\n<li><strong>end_time (float):</strong>  The end time of the range to adjust arrival times.</li>\n<li><strong>rate_parameter (float):</strong>  The factor by which to adjust the arrival times.</li>\n<li><strong>run_id (str):</strong>  The unique identifier for the simulation run.</li>\n<li><strong>plot_input (bool):</strong>  Whether to plot the input data before and after adjustment.</li>\n</ul>\n\n<p>returns:\n    ship_data_df (pd.DataFrame): The updated ship data DataFrame with adjusted arrival times.\n    ship_data (dict): The updated ship data as a dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">start_time</span>, </span><span class=\"param\"><span class=\"n\">end_time</span>, </span><span class=\"param\"><span class=\"n\">rate_parameter</span>, </span><span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">plot_input</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.whatif_scenarios.stop_and_bulk_arrival", "modulename": "simulation_analysis.whatif_scenarios", "qualname": "stop_and_bulk_arrival", "kind": "function", "doc": "<p>This function modifies the ship arrival times in the ship data CSV file by stopping arrivals between <code>start_time</code> and <code>end_time</code>.\nIt also simulates a bulk arrival scenario after <code>end_time</code> by distributing the arrivals evenly over a recovery period.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>start_time (float):</strong>  The start time of the range to stop arrivals.</li>\n<li><strong>end_time (float):</strong>  The end time of the range to stop arrivals.</li>\n<li><strong>run_id (str):</strong>  The unique identifier for the simulation run.</li>\n<li><strong>plot_input (bool):</strong>  Whether to plot the input data before and after adjustment.</li>\n</ul>\n\n<p>returns:\n    ship_data_df (pd.DataFrame): The updated ship data DataFrame with adjusted arrival times.\n    ship_data_dict (dict): The updated ship data as a dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">start_time</span>, </span><span class=\"param\"><span class=\"n\">end_time</span>, </span><span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">plot_input</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "simulation_analysis.whatif_scenarios.model_hurricane", "modulename": "simulation_analysis.whatif_scenarios", "qualname": "model_hurricane", "kind": "function", "doc": "<p>This function models a hurricane scenario by reducing the number of berths, cranes, pipelines, and conveyors in the port terminals.\nIt simulates the disruption by adjusting the resources available in the terminals between specified time periods.\nSpecificcally, the following changes are made:</p>\n\n<ul>\n<li>Reduces the number of berths in all container terminals by 1 from time 1165 to 2004.</li>\n<li>Reduces the number of berths in 10% of liquid and dry bulk terminals by 1 from time 1165 to 2004.</li>\n<li>Reduces the number of cranes in all container terminals by 1 from time 1165 to 2340.</li>\n<li>Reduces the number of pipelines in 25% of liquid terminals by 1 from time 1165 to 2340.</li>\n<li>Reduces the number of conveyors in 25% of dry bulk terminals by 1 from time 1165 to 2340.</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (simpy.Environment):</strong>  The simulation environment.</li>\n<li><strong>terminal_resouces (tuple):</strong>  A tuple containing the resources for the port terminals.</li>\n<li><strong>num_terminals_list (list):</strong>  A list containing the number of container, liquid, and dry bulk terminals.</li>\n<li><strong>terminal_data (dict):</strong>  A dictionary containing terminal data for crane transfer rates.</li>\n<li><strong>run_id (str):</strong>  The unique identifier for the simulation run.</li>\n<li><strong>seed (int):</strong>  The random seed for reproducibility.</li>\n</ul>\n\n<p>returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env</span>,</span><span class=\"param\">\t<span class=\"n\">terminal_resouces</span>,</span><span class=\"param\">\t<span class=\"n\">num_terminals_list</span>,</span><span class=\"param\">\t<span class=\"n\">terminal_data</span>,</span><span class=\"param\">\t<span class=\"n\">run_id</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main", "modulename": "main", "kind": "module", "doc": "<p>Main script to run simulations in parallel or single mode.</p>\n"}, {"fullname": "main.parallel_run", "modulename": "main", "qualname": "parallel_run", "kind": "function", "doc": "<p>Main function to execute the simulation and collate results.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.single_run", "modulename": "main", "qualname": "single_run", "kind": "function", "doc": "<p>Run a single seed simulation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();